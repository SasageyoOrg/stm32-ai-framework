/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 09.08.2022 09:44:34

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 637632;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,160,160,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -21, -14, 
  /* [3][2][][] */ -100, -126, -43, 
  /* [4][0][][] */ 29, -55, -1, 
  /* [4][1][][] */ 24, -127, 0, 
  /* [4][2][][] */ 10, -92, -16, 
  /* [5][0][][] */ -62, 27, -2, 
  /* [5][1][][] */ -127, 30, 1, 
  /* [5][2][][] */ -87, 22, -2, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -14, 
  /* [6][2][][] */ -34, -50, -86, 
  /* [7][0][][] */ 34, 26, -16, 
  /* [7][1][][] */ 127, 70, -7, 
  /* [7][2][][] */ 36, 5, -25, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 97, 
  /* [9][0][][] */ -26, 48, -14, 
  /* [9][1][][] */ -19, 127, -15, 
  /* [9][2][][] */ -10, 88, -8, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 71, 15, -18, 
  /* [13][1][][] */ 127, 105, -13, 
  /* [13][2][][] */ 78, 107, 34, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -88, -27, 20, 
  /* [15][1][][] */ -127, -125, 13, 
  /* [15][2][][] */ -21, -73, -11, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.061008136719465256, 0.30416384339332581, 0.076213523745536804, 0.046987753361463547, 0.006715687457472086, 0.0082849776372313499, 0.039426904171705246, 0.0082016522064805031, 0.048326060175895691, 0.012390760704874992, 0.15314437448978424, 0.26897954940795898, 0.096325166523456573, 0.0051736314781010151, 0.25216507911682129, 0.010813796892762184, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 644, 160, -25, 107, 59820, 51178, 2948, 3932, 3862, 1515, 640, -6, 4419, -8514, 140, 37972, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00023924761626403779, 0.0011927994200959802, 0.00029887657728977501, 0.00018426570750307292, 2.6336030714446679e-05, 3.2490112062077969e-05, 0.00015461532166227698, 3.2163345167646185e-05, 0.00018951397214550525, 4.8591220547677949e-05, 0.00060056621441617608, 0.0010548217687755823, 0.0003777457750402391, 2.0288751329644583e-05, 0.00098888273350894451, 4.2407049477333203e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 0,-3,2,5,-22,11,11,16,-7,-11,-1,-7,2,-7,2,1, 5,-5,1,5,11,-2,15,-26,-10,9,-6,88,-6,20,6,1, 0,-6,-6,4,-1,-14,0,12,-1,2,-4,-8,3,-5,-3,1, 
  /* [0][1][][] */ 11,-11,4,0,127,-24,-127,-21,127,127,-3,-4,105,-23,-1,-17, -127,127,127,-4,-89,-91,-16,-102,14,-105,127,127,127,127,127,127, 18,-3,-5,-3,-12,127,0,-9,-4,-12,-6,-4,11,-4,-14,-7, 
  /* [0][2][][] */ 0,-2,0,-13,-19,16,53,7,-9,-8,-1,1,-7,1,-5,-9, 20,-15,-5,-127,6,-16,-10,127,-8,1,2,-14,-7,-56,-10,-34, 1,-3,-3,-1,0,-4,-2,-2,-1,2,-4,0,0,-5,-8,-10, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0044640465639531612, 0.0092671886086463928, 0.007427810225635767, 0.0072635277174413204, 0.055635672062635422, 0.041328292340040207, 0.0070050074718892574, 0.03466588631272316, 0.012604065239429474, 0.04865739494562149, 0.010548322461545467, 0.008817511610686779, 0.0047876816242933273, 0.011027166619896889, 0.0093984883278608322, 0.022522611543536186, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 21994, -473, -12, 2748, -303, 268, 9871, 1295, 232, 113, -2061, 2839, -1331, -741, -198, -1269, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00010503639350645244, 0.00021805150026921183, 0.00017477200890425593, 0.00017090654000639915, 0.0013090746942907572, 0.00097243045456707478, 0.00016482370847370476, 0.00081566791050136089, 0.00029656625702045858, 0.0011448798468336463, 0.00024819583632051945, 0.0002074708609143272, 0.00011265133798588067, 0.00025946274399757385, 0.00022114090097602457, 0.00052994379075244069, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -14,-11,-15,-62,-23,-36,19,-20,36,6,-33,-3,107,127,-15,-101, 
  /* [1][0][][] */ 127,-58,-41,19,-50,67,-68,-45,-41,81,-35,-52,-11,4,-63,-18, 
  /* [2][0][][] */ -35,-97,41,43,44,-58,-75,-19,28,-92,23,-127,42,-22,-76,21, 
  /* [3][0][][] */ 39,6,11,15,-14,71,-51,-19,127,46,11,18,4,-17,7,19, 
  /* [4][0][][] */ -98,-36,-22,-127,-12,38,56,-118,26,-19,-49,-38,-127,34,-39,-22, 
  /* [5][0][][] */ 86,53,73,-25,48,-43,-127,-123,-18,-71,69,50,-58,51,65,-42, 
  /* [6][0][][] */ 112,40,-127,-77,32,-76,2,-95,-40,18,-126,98,95,-90,7,76, 
  /* [7][0][][] */ -127,-2,99,-27,-62,5,-3,-62,-49,64,85,-31,65,-28,32,29, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0074407625943422318, 0.008901866152882576, 0.007388582918792963, 0.010743964463472366, 0.0083259213715791702, 0.0067917718552052975, 0.0068510668352246284, 0.010833931155502796, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7254, -2491, 12190, -9915, 23392, 7606, -9704, 11151, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00017507676966488361, 0.00020945568394381553, 0.00017384901002515107, 0.00025279916008003056, 0.00019590403826441616, 0.00015980639727786183, 0.00016120157670229673, 0.00025491602718830109, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -39,30,0,-16,-77,-34,-127,35, 
  /* [1][0][][] */ 90,-83,-58,-55,127,-91,99,22, 
  /* [2][0][][] */ -109,115,-52,-127,46,-23,-34,50, 
  /* [3][0][][] */ 57,19,93,13,88,127,124,-5, 
  /* [4][0][][] */ -73,-127,64,11,-52,-108,2,-34, 
  /* [5][0][][] */ 127,-17,71,67,-61,-15,-6,-22, 
  /* [6][0][][] */ 28,36,127,-30,46,-37,-42,28, 
  /* [7][0][][] */ 27,7,-127,-27,-42,99,90,-67, 
  /* [8][0][][] */ 1,127,-37,14,58,94,44,53, 
  /* [9][0][][] */ 7,127,-57,92,29,-106,40,116, 
  /* [10][0][][] */ 10,-124,-4,-32,-71,-127,-63,-83, 
  /* [11][0][][] */ -127,-79,114,50,-8,-70,103,62, 
  /* [12][0][][] */ -26,46,-127,83,36,-60,-78,98, 
  /* [13][0][][] */ 93,-127,87,81,4,31,28,-58, 
  /* [14][0][][] */ -17,77,-43,-127,-37,-116,-35,-61, 
  /* [15][0][][] */ 41,109,34,-19,38,-56,96,-127, 
  /* [16][0][][] */ -121,-127,-54,89,-55,22,-24,86, 
  /* [17][0][][] */ -20,-111,-127,85,-59,66,-55,70, 
  /* [18][0][][] */ -101,-72,-55,93,-5,74,-3,127, 
  /* [19][0][][] */ 64,-127,101,-122,11,-67,31,-33, 
  /* [20][0][][] */ 0,83,46,7,50,127,79,-18, 
  /* [21][0][][] */ 27,113,45,-35,40,-66,92,-127, 
  /* [22][0][][] */ 22,10,97,20,-9,127,29,-33, 
  /* [23][0][][] */ -108,-64,42,-81,95,94,-58,-127, 
  /* [24][0][][] */ -111,-99,32,-89,119,119,-54,-127, 
  /* [25][0][][] */ 127,7,-60,-17,16,34,-64,-9, 
  /* [26][0][][] */ -127,-31,-126,-23,-50,-31,14,2, 
  /* [27][0][][] */ 78,31,1,-55,-127,-22,92,91, 
  /* [28][0][][] */ -127,-85,9,48,-74,-105,4,-1, 
  /* [29][0][][] */ 108,103,37,-127,29,20,-64,-86, 
  /* [30][0][][] */ -91,-65,44,-74,74,82,-44,-127, 
  /* [31][0][][] */ 49,43,-9,127,6,-75,3,13, 
  /* [32][0][][] */ -31,127,-4,33,25,65,-13,46, 
  /* [33][0][][] */ -40,127,-79,29,22,-32,-31,4, 
  /* [34][0][][] */ -127,-113,-48,104,-19,7,9,106, 
  /* [35][0][][] */ -53,127,-30,-5,67,103,50,69, 
  /* [36][0][][] */ 70,28,2,-44,-127,-27,109,107, 
  /* [37][0][][] */ -65,120,25,19,-127,107,-29,-104, 
  /* [38][0][][] */ 36,40,23,24,127,71,99,58, 
  /* [39][0][][] */ -22,-71,37,-24,10,40,-98,127, 
  /* [40][0][][] */ -67,-55,-75,127,-24,0,11,65, 
  /* [41][0][][] */ 127,10,50,95,-47,-9,0,-22, 
  /* [42][0][][] */ -37,5,-73,-127,54,-105,9,80, 
  /* [43][0][][] */ 22,-9,81,-4,33,127,86,11, 
  /* [44][0][][] */ -30,-25,-61,127,46,12,-34,-36, 
  /* [45][0][][] */ 63,127,107,-112,54,-55,14,-110, 
  /* [46][0][][] */ -33,-127,-44,32,-7,39,-66,121, 
  /* [47][0][][] */ 40,42,122,5,86,127,120,-21, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0046586757525801659, 0.0044255563989281654, 0.0027651351410895586, 0.0031508924439549446, 0.00070221186615526676, 0.0030597348231822252, 0.0049887564964592457, 0.0023025288246572018, 0.0032302008476108313, 0.0054295039735734463, 0.0032767495140433311, 0.002926904009655118, 0.0021653913427144289, 0.0037776948884129524, 0.0031021854374557734, 0.0032355193980038166, 0.0023766208905726671, 0.00089312961790710688, 0.0023567443713545799, 0.0033887100871652365, 0.003707636846229434, 0.0019894670695066452, 0.0047508571296930313, 0.0031486107036471367, 0.0046012969687581062, 0.0077206245623528957, 0.0033281615469604731, 0.0099058765918016434, 0.0027539888396859169, 0.00079352024476975203, 0.0032230683136731386, 0.0075940173119306564, 0.003960923757404089, 0.0036993385292589664, 0.0030170741956681013, 0.0033508918713778257, 0.0048425276763737202, 0.0069539221003651619, 0.003978316206485033, 0.0051765632815659046, 0.0033155360724776983, 0.0032685431651771069, 0.0035716590937227011, 0.0046595730818808079, 0.0041515263728797436, 0.0023005472030490637, 0.0026608349289745092, 0.0033302381634712219, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 924, -397, -434, 1144, 12668, 1997, -431, 3330, 1172, 1190, 229, 2746, 1005, 441, -805, 474, 2828, 9132, 2923, -663, 1103, -1064, -102, 2146, -300, -580, 1421, -17, 2516, 10575, 2070, -46, 477, -164, 2171, 106, 371, -173, 984, 985, 1435, 1780, 142, -295, 603, 1970, 1261, -140, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00053086160914972425, 0.00050429737893864512, 0.00031509040854871273, 0.00035904793185181916, 8.0017875006888062e-05, 0.00034866039641201496, 0.00056847470114007592, 0.00026237589190714061, 0.00036808522418141365, 0.0006186984246596694, 0.00037338948459364474, 0.00033352416357956827, 0.00024674891028553247, 0.00043047280632890761, 0.00035349771496839821, 0.00036869125324301422, 0.00027081876760348678, 0.00010177317744819447, 0.00026855382020585239, 0.00038614752702414989, 0.0004224895965307951, 0.00022670213365927339, 0.00054136582184582949, 0.0003587879182305187, 0.00052432325901463628, 0.00087977433577179909, 0.00037924794014543295, 0.0011287863599136472, 0.00031382028828375041, 9.0422574430704117e-05, 0.00036727244150824845, 0.00086534727597609162, 0.00045135195250622928, 0.00042154401307925582, 0.00034379918361082673, 0.00038183809374459088, 0.00055181176867336035, 0.00079240766353905201, 0.00045333383604884148, 0.00058987550437450409, 0.00037780925049446523, 0.00037245434941723943, 0.00040699477540329099, 0.00053096388000994921, 0.00047307135537266731, 0.00026215007528662682, 0.00030320527730509639, 0.00037948458339087665, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -37,-89,-14,-13,127,-63,72,-56,-87,-84,-20,-47,119,39,74,-127,57,-27,0,-33,-65,112,-1,22,-27,78,57,-43,76,-69,20,-49,-118,-84,47,74,27,82,119,-69,-123,-15,37,66,53,-127,95,72, -53,-121,-86,50,-99,111,58,-63,-66,36,77,-108,127,87,127,-80,-84,-82,29,-48,-62,106,-71,118,-87,102,88,-125,90,-49,10,-125,-52,-84,78,126,112,126,127,-63,-127,-64,70,89,87,103,96,74, 7,-59,-61,107,-47,-35,25,0,92,22,61,-76,23,56,-24,-8,-86,-23,26,-26,-18,20,-74,1,-73,42,21,-85,35,56,123,-65,18,8,-8,50,81,76,49,1,-29,96,65,37,46,29,17,-109, 
  /* [0][1][][] */ -102,-93,-15,-75,-95,-83,104,-103,-127,-127,90,-80,96,56,-122,-70,127,-127,-65,-75,-81,127,-41,18,-24,98,103,-56,-108,-77,7,-56,-102,-127,-127,68,40,91,15,-92,55,-15,83,116,85,104,124,-127, -127,-127,-127,-100,-39,127,127,-127,97,62,127,-127,109,127,78,-117,57,-89,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-10,-127,-127,-105,48,127,127,127,-7,-127,92,-98,127,127,127,-4,127,110, -46,-72,-115,127,73,-59,52,-23,67,23,22,-59,10,69,92,-59,-19,-1,-18,-72,-57,30,-80,-13,-117,50,32,-91,-52,40,127,-80,-44,7,62,80,81,74,-30,-34,35,127,82,26,55,-46,19,25, 
  /* [0][2][][] */ -127,-31,22,10,-41,-34,25,-46,31,-46,24,-46,7,30,-43,-30,-92,-21,87,-28,-8,52,-59,-11,-13,48,74,-14,33,57,-2,-10,12,-80,-45,35,12,17,-55,-36,15,6,40,44,25,53,15,-60, -104,-57,-26,-64,96,35,59,-57,105,19,-35,-70,-3,48,-119,-92,29,11,44,-58,-39,43,-51,46,-58,55,79,-29,38,5,-21,-42,-67,-25,-66,57,31,24,-102,-58,21,-43,73,73,37,-105,21,9, -36,-47,-42,-16,-19,-22,15,-22,-66,9,-6,-27,-10,21,49,-39,27,33,-6,-52,-24,5,-18,-30,-54,2,23,-22,12,-61,52,-29,-76,17,19,50,18,25,-55,-20,-6,50,19,22,13,-2,1,41, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0031581905204802752, 0.0037784844171255827, 0.0073894364759325981, 0.0069090444594621658, 0.026610042899847031, 0.0074881077744066715, 0.0087888175621628761, 0.0039587542414665222, 0.004833076149225235, 0.0038716723211109638, 0.0026917648501694202, 0.002103263046592474, 0.0033920197747647762, 0.0025254855863749981, 0.0084946397691965103, 0.0078323343768715858, 0.0052921143360435963, 0.014459623955190182, 0.0060243909247219563, 0.0056523173116147518, 0.0065546669065952301, 0.019840503111481667, 0.0051351874135434628, 0.011199426837265491, 0.0061155757866799831, 0.0031812849920243025, 0.0023543671704828739, 0.0032287521753460169, 0.0071957977488636971, 0.034175325185060501, 0.011624917387962341, 0.002961830934509635, 0.0043690875172615051, 0.0059518818743526936, 0.0071186772547662258, 0.0024410232435911894, 0.0031920408364385366, 0.0020351090934127569, 0.00529100326821208, 0.0029047932475805283, 0.006484616082161665, 0.0066501414403319359, 0.0028889775276184082, 0.0034352799411863089, 0.0031446777284145355, 0.017764365300536156, 0.0027855464722961187, 0.0090935779735445976, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 11478, 4682, 3754, -991, 1908, 630, -279, 31524, -1321, 2860, 8203, 61995, 2377, 4523, -306, 12365, -431, 13283, 1296, 6839, 11209, 216, 2054, -10116, 9375, 1624, 2421, 13575, 148, -1386, -11006, 10689, 4546, 684, -144, 6027, -9567, 10248, -1711, 16648, 302, -1629, 6308, 3267, 1731, -437, 2532, -725, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 7.43103664717637e-05, 8.890551544027403e-05, 0.00017386909166816622, 0.00016256576054729521, 0.00062611867906525731, 0.00017619077698327601, 0.0002067957102553919, 9.3147158622741699e-05, 0.00011371944128768519, 9.1098176199011505e-05, 6.3335646700579673e-05, 4.9488542572362348e-05, 7.9812234616838396e-05, 5.9423189668450505e-05, 0.00019987388805020601, 0.00018429022748023272, 0.00012452034570742399, 0.00034022645559161901, 0.00014175038086250424, 0.00013299570127855986, 0.00015422745491378009, 0.00046683536493219435, 0.00012082794273737818, 0.00026351591804996133, 0.00014389590069185942, 7.4853764090221375e-05, 5.5396874813595787e-05, 7.5970638135913759e-05, 0.00016931288701016456, 0.00080412533134222031, 0.00027352746110409498, 6.9690140662714839e-05, 0.00010280206333845854, 0.00014004428521730006, 0.00016749829228501767, 5.7435841881670058e-05, 7.5106843723915517e-05, 4.7884921514196321e-05, 0.00012449419591575861, 6.8348075728863478e-05, 0.00015257920313160866, 0.00015647392137907445, 6.7975939600728452e-05, 8.0830119259189814e-05, 7.3992421675939113e-05, 0.0004179850802756846, 6.5542270021978766e-05, 0.0002139665448339656, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -40,-3,32,11,-31,-13,9,8,-40,-7,-66,-56,-25,-64,-13,-33,45,-38,38,41,-19,32,-37,13,2,-43,53,-12,-5,-20,14,10,83,34,37,-127,15,-2,-16,-33,2,-17,42,47,33,4,25,4, 
  /* [1][0][][] */ 6,35,57,-27,-13,50,-55,-28,3,30,-17,-98,13,95,-19,57,-19,20,-26,-57,14,-89,-25,22,-75,-18,-4,-116,-29,-12,32,-63,52,84,-46,8,127,-31,4,51,-30,43,-83,-28,121,-20,-37,-26, 
  /* [2][0][][] */ -2,-28,-72,15,-3,47,24,4,-7,45,-1,27,66,-93,19,-60,34,-95,23,29,-18,46,-2,26,-18,56,-27,-72,15,6,15,-79,-43,-89,39,-27,106,20,-12,-62,1,30,83,31,127,18,18,25, 
  /* [3][0][][] */ -6,25,-66,44,15,-35,-66,-99,14,-19,-33,-2,7,27,37,79,-6,11,-33,24,3,-99,25,-56,-72,-7,127,-14,-41,4,-64,14,-4,-75,14,-9,-18,-38,-20,98,-45,-32,3,20,41,4,-37,43, 
  /* [4][0][][] */ -27,-48,-10,9,31,-28,-13,-9,28,-29,59,-74,8,30,11,10,-18,-25,12,-16,-2,-54,7,-20,17,-10,41,47,35,23,-15,25,-11,-2,2,0,-68,86,35,-25,29,-19,-18,-23,-75,13,127,11, 
  /* [5][0][][] */ 42,-23,1,15,26,-41,35,-127,23,-28,-10,121,-79,69,24,-63,2,-95,13,1,-36,59,-40,-48,-62,80,-25,2,-19,50,-41,-37,23,49,35,-3,-37,-7,-42,-44,20,-39,-46,-6,-33,55,93,19, 
  /* [6][0][][] */ 51,-23,21,-9,-35,-19,-38,19,-40,7,-40,127,-41,-36,-4,59,11,45,17,32,39,-84,-25,19,20,41,-63,4,9,-43,13,37,4,16,-16,-1,15,2,-3,-5,-7,-14,42,58,-1,-38,75,-15, 
  /* [7][0][][] */ -35,3,-4,64,35,30,5,31,22,6,73,-1,125,107,64,53,44,45,-15,0,28,-21,-85,-26,15,1,-27,60,33,-27,-33,-18,41,7,41,-92,-71,39,38,53,-30,35,89,127,-57,-28,-104,57, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0087749678641557693, 0.0052861939184367657, 0.0062881787307560444, 0.0056970706209540367, 0.0081347282975912094, 0.0066564357839524746, 0.0092289764434099197, 0.0052203387022018433, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7528, 16362, -4289, 5835, -1219, 3656, -12066, -18768, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00020646983466576785, 0.00012438104022294283, 0.00014795715105719864, 0.00013404872152023017, 0.00019140537187922746, 0.00015662201622035354, 0.00021715239563491195, 0.00012283149408176541, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 64,127,-69,-79,10,67,15,65, 
  /* [1][0][][] */ 54,-79,44,-127,-58,73,-85,-43, 
  /* [2][0][][] */ -34,127,121,42,113,-2,55,19, 
  /* [3][0][][] */ 106,52,-77,75,8,-107,-127,-22, 
  /* [4][0][][] */ -40,29,14,-66,-31,101,127,40, 
  /* [5][0][][] */ 28,83,-127,-78,55,95,32,-32, 
  /* [6][0][][] */ -15,127,58,48,74,8,14,-88, 
  /* [7][0][][] */ 127,-28,-40,29,14,1,101,10, 
  /* [8][0][][] */ 48,127,58,85,110,70,96,-83, 
  /* [9][0][][] */ 39,120,-127,-96,6,111,7,74, 
  /* [10][0][][] */ -61,-43,24,-48,-5,-29,-49,127, 
  /* [11][0][][] */ 15,-109,-127,-20,11,-9,31,-15, 
  /* [12][0][][] */ -16,-104,-127,-28,-108,28,-58,37, 
  /* [13][0][][] */ -7,7,-101,96,-127,-23,1,-20, 
  /* [14][0][][] */ -68,-48,-127,-13,38,2,-14,-65, 
  /* [15][0][][] */ 17,-94,-127,22,-111,-22,-27,-10, 
  /* [16][0][][] */ 127,-67,-16,72,-91,29,42,110, 
  /* [17][0][][] */ -21,120,127,-24,-44,-16,-22,-20, 
  /* [18][0][][] */ 8,-127,47,69,-5,-69,41,-82, 
  /* [19][0][][] */ 127,-47,-58,35,-95,3,38,98, 
  /* [20][0][][] */ -30,-127,83,76,-12,-89,-2,-72, 
  /* [21][0][][] */ -4,-42,-11,-30,127,-6,40,26, 
  /* [22][0][][] */ -127,26,-71,51,48,57,-79,-104, 
  /* [23][0][][] */ -100,-46,68,-8,-119,127,125,-53, 
  /* [24][0][][] */ -42,65,-2,-41,-48,117,127,4, 
  /* [25][0][][] */ -51,-97,-127,-56,-44,-13,-25,-35, 
  /* [26][0][][] */ -7,78,-12,127,-99,35,-56,1, 
  /* [27][0][][] */ 19,-127,38,82,18,-55,8,-126, 
  /* [28][0][][] */ 27,127,57,52,113,-29,23,-54, 
  /* [29][0][][] */ 85,28,-29,-18,77,-127,-100,46, 
  /* [30][0][][] */ 30,-1,37,-127,20,-25,22,-27, 
  /* [31][0][][] */ 42,-38,9,58,-7,32,16,127, 
  /* [32][0][][] */ -95,-67,16,-55,-66,127,55,99, 
  /* [33][0][][] */ -35,41,42,-32,38,127,-114,63, 
  /* [34][0][][] */ 22,127,-62,-48,14,45,-62,72, 
  /* [35][0][][] */ 11,-127,38,50,-21,-65,47,-80, 
  /* [36][0][][] */ -19,-37,-76,-9,-127,-48,-13,9, 
  /* [37][0][][] */ -60,-127,72,83,-48,-84,-6,-47, 
  /* [38][0][][] */ -72,26,65,-70,-127,-83,-63,84, 
  /* [39][0][][] */ 62,-127,101,71,4,-94,-25,-78, 
  /* [40][0][][] */ -7,59,24,45,-127,-17,-62,21, 
  /* [41][0][][] */ 110,127,-77,-103,57,14,-1,19, 
  /* [42][0][][] */ -11,-40,-16,16,127,7,43,17, 
  /* [43][0][][] */ 127,32,90,29,-69,-30,60,118, 
  /* [44][0][][] */ 78,37,-31,8,73,-109,-127,16, 
  /* [45][0][][] */ 47,19,20,25,83,-127,-4,-51, 
  /* [46][0][][] */ 59,-34,-3,127,47,60,25,81, 
  /* [47][0][][] */ -70,-74,39,58,-52,15,127,-67, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0039657959714531898, 0.0021047992631793022, 0.00088428769959136844, 0.0027005730662494898, 0.0032286844216287136, 0.0036450235638767481, 0.0022984084207564592, 0.0011835516197606921, 0.0021611086558550596, 0.0036466312594711781, 0.0039718206971883774, 0.0031050806865096092, 0.00092835573013871908, 0.0036776324268430471, 0.0031614114996045828, 0.00070323271211236715, 0.0039286790415644646, 0.0030888039618730545, 0.0043194168247282505, 0.0028071962296962738, 0.003235723590478301, 0.0030407477170228958, 0.0049410751089453697, 0.00070078205317258835, 0.0020759305916726589, 0.0020996297243982553, 0.00096953735919669271, 0.0038173522334545851, 0.0020144002046436071, 0.0023023881949484348, 0.0080037033185362816, 0.0048638470470905304, 0.0034818733111023903, 0.0033881952986121178, 0.0043577742762863636, 0.0044320635497570038, 0.002863375237211585, 0.0044884062372148037, 0.0035105729475617409, 0.0031998809427022934, 0.0023928838782012463, 0.003775883000344038, 0.0024821890983730555, 0.0021131921093910933, 0.0022725728340446949, 0.0038220242131501436, 0.0040117911994457245, 0.0023825082462280989, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 1896, 5386, 14040, 1268, 2022, -1363, 4341, 10130, 3304, -719, 2703, -1865, 12739, -1519, 1964, 19883, -380, 1730, 233, 3007, 2843, 3187, 403, 19807, 5081, 3823, 13910, 1434, 4958, 4318, 445, 1113, 882, 1516, -318, 137, -2438, -500, 2140, 2174, 4404, 1723, 4528, 4939, 4370, 2383, 2033, 4409, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00030554091790691018, 0.00016216222138609737, 6.8129091232549399e-05, 0.00020806303655263036, 0.00024875087547115982, 0.00028082731296308339, 0.00017707864753901958, 9.1185589553788304e-05, 0.00016650052566546947, 0.00028095117886550725, 0.00030600509489886463, 0.00023922794207464904, 7.1524271334055811e-05, 0.00028333964291960001, 0.00024356789072044194, 5.4179883591132239e-05, 0.0003026812628377229, 0.00023797391622792929, 0.00033278530463576317, 0.00021627772366628051, 0.00024929319624789059, 0.00023427147243637592, 0.00038068034336902201, 5.3991076129022986e-05, 0.0001599380630068481, 0.00016176393546629697, 7.4697069067042321e-05, 0.00029410421848297119, 0.00015519751468673348, 0.0001773852709447965, 0.00061663758242502809, 0.00037473038537427783, 0.0002682575723156333, 0.00026104022981598973, 0.00033574050758033991, 0.0003414640377741307, 0.0002206059725722298, 0.00034580490319058299, 0.00027046870673075318, 0.00024653173750266433, 0.00018435742822475731, 0.00029090925818309188, 0.00019123786478303373, 0.00016280883573926985, 0.00017508817836642265, 0.00029446414555422962, 0.00030908457119949162, 0.00018355804786551744, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 8,-45,7,2,-20,-113,-39,47,-33,4,0,6,45,-3,-6,7,86,15,18,9,2,-32,-74,22,8,-15,8,-25,-57,65,-15,-108,42,-9,-58,-68,-12,-36,7,0,-14,38,3,5,-16,74,127,-17, -127,-92,-24,127,-62,72,-93,127,28,20,19,-7,49,21,1,-40,-30,63,19,13,3,117,8,127,127,-34,-39,40,70,-127,-12,-88,57,-9,-41,-127,19,8,-52,-45,-127,-6,-102,-122,33,63,59,119, -19,-6,9,7,-22,17,38,47,15,-31,1,3,-26,5,2,10,-49,30,-72,-25,-4,-37,127,31,-44,-4,15,-4,21,31,4,5,-9,-11,-29,90,7,11,11,80,36,-19,24,-28,-13,42,-17,-17, 
  /* [0][1][][] */ -14,-29,-30,-5,36,-122,127,-89,-8,18,22,31,127,18,7,-32,-29,-35,20,44,66,-78,46,13,-62,127,-73,-15,127,-95,49,-127,-48,2,-88,2,9,-68,-42,8,127,127,9,-127,-63,-53,-11,74, 100,-127,127,3,127,75,-67,-47,32,127,127,-127,-90,127,127,127,127,127,105,127,127,104,-4,1,108,-104,-127,127,40,125,127,-10,-127,127,127,127,-127,127,-127,-121,47,48,-127,-29,127,-127,-16,76, 26,19,-42,-7,-45,127,-115,107,112,-80,14,57,-39,16,14,-63,25,6,-127,20,23,-127,-48,-1,64,-20,-22,123,-69,-40,27,-42,-30,18,102,-13,38,6,-9,-95,120,10,35,58,-59,98,113,-90, 
  /* [0][2][][] */ -5,6,4,-32,4,-70,-11,-17,6,9,-3,1,-12,-11,3,-3,-53,29,2,-40,1,-29,93,-8,-100,3,48,-23,13,3,1,34,-12,-19,-68,20,-2,-16,16,52,-35,-11,9,9,-23,28,-16,2, 47,-35,-37,-34,30,40,115,-106,127,-32,-11,3,-69,-18,-18,-72,-19,118,3,25,7,23,-32,-31,-71,58,82,-3,-86,19,-32,-11,-27,-12,-39,-10,48,-26,-3,127,-124,-1,-14,66,30,62,5,-127, -5,9,3,-20,-11,-17,-6,-51,-20,-28,-13,3,17,-7,-9,11,52,44,-27,-13,-3,-25,-61,-11,22,-28,27,-17,-9,3,-11,18,24,-21,-25,-54,-7,11,22,13,-11,-14,7,25,-19,20,72,-58, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.010506692342460155, 0.0065461746416985989, 0.035288624465465546, 0.012039403431117535, 0.010108886286616325, 0.012605076655745506, 0.010564781725406647, 0.01494524534791708, 0.0038923786487430334, 0.011841330677270889, 0.0092808594927191734, 0.075700409710407257, 0.02136608399450779, 0.03395625576376915, 0.017711002379655838, 0.031234283000230789, 0.0071745151653885841, 0.0024550401140004396, 0.011620818637311459, 0.014994519762694836, 0.01176354568451643, 0.011205043643712997, 0.003406561678275466, 0.020597135648131371, 0.0082921022549271584, 0.019827479496598244, 0.026320904493331909, 0.00910966657102108, 0.010070336051285267, 0.016451019793748856, 0.0070811896584928036, 0.0041968189179897308, 0.0055188816040754318, 0.010159295983612537, 0.0054212296381592751, 0.01444417517632246, 0.10040883719921112, 0.014573181048035622, 0.006274661049246788, 0.0078774867579340935, 0.0086731119081377983, 0.006470831111073494, 0.013273973017930984, 0.0097023909911513329, 0.017623508349061012, 0.0031913269776850939, 0.0022257533855736256, 0.0077510802075266838, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -280, 13596, -176, -364, 85, -918, 1497, -786, -4242, -172, -6233, 42, -225, -765, -3162, 4020, 7204, 3727, 746, -4803, -7116, 2592, 19848, -5520, -2136, 198, 3338, -6860, -1912, 553, -7196, 9838, 6058, 512, 3521, 374, 70, -477, 10600, -810, 4673, -3329, 4177, 4073, -95, 9604, 1659, 1501, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00024721628869883716, 0.00015402764256577939, 0.00083032058319076896, 0.00028328009648248553, 0.00023785614757798612, 0.00029659003484994173, 0.00024858309188857675, 0.00035165285225957632, 9.1585381596814841e-05, 0.00027861955459229648, 0.00021837317035533488, 0.0017811860889196396, 0.00050273141823709011, 0.0007989707519300282, 0.00041672948282212019, 0.00073492433875799179, 0.000168812126503326, 5.7765650126384571e-05, 0.00027343104011379182, 0.00035281223244965076, 0.00027678930200636387, 0.00026364807854406536, 8.0154393799602985e-05, 0.00048463849816471338, 0.00019510829588398337, 0.0004665289307013154, 0.00061931542586535215, 0.00021434509835671633, 0.00023694908304605633, 0.00038708283682353795, 0.00016661622794345021, 9.8748685559257865e-05, 0.00012985603825654835, 0.00023904225963633507, 0.00012755834904965013, 0.00033986294874921441, 0.0023625609464943409, 0.00034289839095436037, 0.00014763908984605223, 0.00018535263370722532, 0.0002040732215391472, 0.0001522548554930836, 0.00031232877518050373, 0.00022829155204817653, 0.00041467079427093267, 7.5090050813741982e-05, 5.2370669436641037e-05, 0.00018237836775369942, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -44,-52,-20,-64,-5,-13,91,83,-103,-77,-35,6,-58,5,-51,27,-78,3,9,127,55,-24,14,87,63,71,23,9,-88,-54,-80,-50,-46,95,28,-44,27,-28,84,-4,25,9,0,-94,32,-34,-37,-82, 
  /* [1][0][][] */ -12,54,-19,-28,-70,58,-20,-48,-36,76,-15,17,56,41,-54,-6,-22,-123,75,-50,127,12,-67,22,55,1,-86,63,37,-15,66,28,-37,-16,1,-9,4,114,-21,-28,69,47,-5,15,106,15,-36,54, 
  /* [2][0][][] */ -23,-33,115,7,88,-40,-7,24,-34,0,-11,51,12,-46,-48,-127,-52,-100,-25,15,-94,22,-39,-37,-50,27,1,-41,-37,3,-34,-15,-6,-4,20,-1,34,-28,-48,5,34,-33,29,-41,-46,-45,-63,-52, 
  /* [3][0][][] */ 54,10,71,8,21,-42,39,80,-58,-23,52,-16,-68,68,-22,53,65,35,-42,30,-117,-65,127,7,14,4,-58,-39,-56,72,127,-72,10,-117,-22,53,-10,-79,-18,82,-74,-56,68,-8,-97,-74,58,-2, 
  /* [4][0][][] */ 17,-17,71,-29,8,-13,-3,-3,-58,-5,-20,8,48,-70,36,-97,41,47,-11,-37,12,34,17,10,1,11,58,-14,26,23,-127,-16,-28,-19,4,17,53,0,33,1,-36,-11,-74,28,-17,-95,2,22, 
  /* [5][0][][] */ 33,-42,63,29,32,20,27,3,-72,-10,-46,28,28,1,8,-39,97,76,0,-15,85,-58,127,-89,-15,38,5,44,13,17,-30,-53,-17,-45,-32,15,40,26,70,9,-78,25,35,31,54,-19,83,-3, 
  /* [6][0][][] */ -41,57,-122,88,51,23,29,23,-15,-14,61,-83,-103,-22,-32,33,-117,30,-3,93,21,46,-87,-98,-9,-38,19,70,-32,-27,-43,6,37,78,-41,-25,-22,-9,85,9,72,61,-127,-64,-28,119,-51,-40, 
  /* [7][0][][] */ 37,81,-81,18,22,57,115,71,49,77,-97,-2,-39,-1,-72,-40,19,45,114,92,88,3,127,30,116,106,-42,95,-63,32,6,-76,17,-67,-24,17,-2,100,-61,80,-58,49,-11,-91,82,-19,55,-34, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0039276680909097195, 0.004855879582464695, 0.0060840565711259842, 0.0039134356193244457, 0.0052850428037345409, 0.0054829400032758713, 0.0036351315211504698, 0.0033419018145650625, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 2663, 1649, 22530, -5878, 5036, -15172, 2026, -14962, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.2415721155703068e-05, 0.00011425599223002791, 0.00014315427688416094, 9.2080837930552661e-05, 0.00012435394455678761, 0.00012901035370305181, 8.5532505181618035e-05, 7.8632983786519617e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 54,28,127,-33,65,107,-61,-49, 
  /* [1][0][][] */ 11,-86,-127,6,49,31,28,4, 
  /* [2][0][][] */ -127,-5,-40,-30,61,28,-75,-40, 
  /* [3][0][][] */ 35,63,127,-75,-8,-94,-6,-17, 
  /* [4][0][][] */ -127,16,-45,-27,43,18,-43,-64, 
  /* [5][0][][] */ -108,30,-59,-16,11,40,-89,-127, 
  /* [6][0][][] */ -39,-127,-118,42,105,12,10,48, 
  /* [7][0][][] */ -61,-127,-95,-73,-64,-61,20,83, 
  /* [8][0][][] */ 80,35,-6,-4,92,-75,-127,14, 
  /* [9][0][][] */ -38,56,-48,86,-57,-44,127,-32, 
  /* [10][0][][] */ -29,127,38,59,115,-24,-5,57, 
  /* [11][0][][] */ -81,-37,-20,-5,-84,105,127,-2, 
  /* [12][0][][] */ 69,32,-127,37,-11,-37,-69,-16, 
  /* [13][0][][] */ 61,-33,-71,11,12,-127,-32,-24, 
  /* [14][0][][] */ -1,-75,85,9,127,-117,-66,21, 
  /* [15][0][][] */ -48,-41,2,127,74,90,-74,35, 
  /* [16][0][][] */ 113,28,-35,15,77,-110,-127,-28, 
  /* [17][0][][] */ 59,127,58,72,46,66,22,-85, 
  /* [18][0][][] */ 37,-15,0,-2,127,7,31,-11, 
  /* [19][0][][] */ 12,127,35,13,-118,16,19,-31, 
  /* [20][0][][] */ -52,24,67,-127,18,34,-13,109, 
  /* [21][0][][] */ -34,72,41,-127,28,46,-13,117, 
  /* [22][0][][] */ -76,-71,-88,19,-127,123,123,-24, 
  /* [23][0][][] */ 99,34,-127,21,10,-47,-68,-22, 
  /* [24][0][][] */ -46,49,6,7,-17,76,-127,104, 
  /* [25][0][][] */ -103,-55,-127,9,-57,-70,69,96, 
  /* [26][0][][] */ 44,-9,-35,-31,110,-14,127,-36, 
  /* [27][0][][] */ 127,-66,27,88,5,32,-19,100, 
  /* [28][0][][] */ 47,56,60,-5,127,-48,45,-29, 
  /* [29][0][][] */ -19,-8,-21,-39,-63,17,127,-29, 
  /* [30][0][][] */ 39,-127,-49,-59,-98,-3,14,-51, 
  /* [31][0][][] */ 13,23,-10,-10,-127,8,-29,-12, 
  /* [32][0][][] */ 49,-61,-61,81,-11,-94,111,-127, 
  /* [33][0][][] */ 50,127,54,37,55,-24,-19,-26, 
  /* [34][0][][] */ -123,-41,127,-5,-19,112,97,7, 
  /* [35][0][][] */ -32,75,127,-13,-65,-67,-33,25, 
  /* [36][0][][] */ -88,6,94,-16,-16,127,69,26, 
  /* [37][0][][] */ -24,-87,-11,-127,-47,-75,73,47, 
  /* [38][0][][] */ 45,-23,88,-54,54,65,-127,6, 
  /* [39][0][][] */ -18,96,-127,-46,-21,-4,7,88, 
  /* [40][0][][] */ 58,-48,30,27,15,7,10,127, 
  /* [41][0][][] */ -32,85,127,-12,18,82,-64,21, 
  /* [42][0][][] */ 57,-127,-107,-17,-116,10,9,-87, 
  /* [43][0][][] */ -18,-76,39,-57,127,-30,19,45, 
  /* [44][0][][] */ 5,127,121,26,7,44,-69,12, 
  /* [45][0][][] */ -35,50,18,76,-118,59,-127,23, 
  /* [46][0][][] */ -42,-41,59,43,-127,-116,-27,-5, 
  /* [47][0][][] */ -15,64,41,-105,-127,44,-28,70, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0027412909548729658, 0.0037846623454242945, 0.003074943320825696, 0.0033277054317295551, 0.0020943684503436089, 0.0020754842553287745, 0.002194778760895133, 0.0020468337461352348, 0.0038229890633374453, 0.0041004391387104988, 0.0021981063764542341, 0.0023894994519650936, 0.0031186630949378014, 0.0028840112499892712, 0.0038137328810989857, 0.0015796198276802897, 0.0027236125897616148, 0.0028583731036633253, 0.0018099395092576742, 0.0034058119636029005, 0.0033987737260758877, 0.0025551656726747751, 0.0030237992759793997, 0.0016664826544001698, 0.0024161271285265684, 0.0030730313155800104, 0.0035514370538294315, 0.0029492706526070833, 0.0016256512608379126, 0.004096129909157753, 0.001939533744007349, 0.0017607989721000195, 0.0021928215865045786, 0.0026883231475949287, 0.0021653440780937672, 0.0032496105413883924, 0.0023115044459700584, 0.0029699534643441439, 0.0029414177406579256, 0.0021203334908932447, 0.0029414517339318991, 0.0011257418664172292, 0.0015197435859590769, 0.0031030676327645779, 0.0013530723517760634, 0.0031056085135787725, 0.0024613817222416401, 0.0027809636667370796, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1709, -981, 694, -1488, 4089, -877, 3555, -2890, 753, 526, 1961, 3583, 470, -359, 352, 5227, -1765, 2836, 5435, 749, -708, 2330, -672, 5377, 1884, 1421, 864, -798, 6140, -330, 2679, -2077, -639, 3151, -1068, 1803, 2055, 785, 376, 3859, 1845, 8858, -3743, 1455, 7097, -17, 2527, 2232, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.0002537791442591697, 0.0003503708285279572, 0.00028466753428801894, 0.00030806736322119832, 0.00019388932560104877, 0.00019214108760934323, 0.00020318495808169246, 0.00018948872457258403, 0.00035391899291425943, 0.00037960434565320611, 0.00020349302212707698, 0.00022121152142062783, 0.00028871494578197598, 0.00026699170120991766, 0.00035306208883412182, 0.0001462356885895133, 0.00025214254856109619, 0.00026461819652467966, 0.00016755788237787783, 0.00031529818079434335, 0.000314646604238078, 0.00023654832330066711, 0.00027993277763016522, 0.00015427714970428497, 0.00022367661586031318, 0.00028449052479118109, 0.00032877965713851154, 0.00027303319075144827, 0.00015049711510073394, 0.00037920541944913566, 0.0001795552670955658, 0.0001630086189834401, 0.00020300377218518406, 0.00024887558538466692, 0.00020045999553985894, 0.00030083759338594973, 0.00021399102115537971, 0.00027494793175719678, 0.00027230620617046952, 0.00019629308371804655, 0.00027230934938415885, 0.00010421725164633244, 0.00014069255848880857, 0.00028727116296067834, 0.00012526271166279912, 0.00028750640922226012, 0.00022786612680647522, 0.00025745190214365721, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -98,67,-127,101,-99,85,-55,86,-90,-73,62,-47,58,-65,-53,-58,79,74,87,-112,84,-115,80,-82,-120,-61,72,107,-96,-50,-95,116,78,-88,65,-122,-82,-112,92,-42,-5,-89,110,-111,112,73,-82,-84, -103,97,-66,114,-79,123,-51,112,-121,-85,100,-75,82,-96,-65,-91,107,101,127,-127,108,-127,108,-127,-116,-81,87,127,27,-75,-119,127,101,-127,94,-127,-98,-127,106,-60,-107,103,127,-127,-31,112,-96,-123, -69,45,13,33,-26,54,-28,69,-61,-27,51,-28,45,-49,-28,-19,39,46,65,-39,43,-67,54,-45,-102,-33,28,39,84,-41,-69,40,50,-78,49,-52,-32,-52,38,-37,-127,-38,47,-79,-67,53,-36,-63, 
  /* [0][1][][] */ -103,87,-62,114,-74,123,-115,98,-95,-99,82,-88,79,-90,-95,-97,107,89,-50,-88,109,-120,109,-69,-121,-87,107,92,-127,-84,-107,100,107,32,103,-126,-104,-103,103,-76,-101,-115,98,-109,127,83,-109,-115, -127,127,-97,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-57,-100,127,-124,127,-119,-127,-127,127,109,13,-127,-127,119,127,36,127,-121,-127,-101,127,-127,-127,127,112,-117,-61,127,-127,-127, -79,62,-79,50,-68,39,-59,73,-37,-36,67,-59,65,-58,-55,-15,64,56,-43,-25,45,-69,51,-46,-126,-64,53,55,87,-67,-68,38,52,18,58,-51,-38,-35,51,-65,-57,-77,35,-65,-93,73,-24,-59, 
  /* [0][2][][] */ -53,42,-1,55,-34,57,-58,44,-56,-41,34,-54,38,-61,-47,-58,49,37,-80,-13,34,-26,51,-24,-71,-52,51,5,-70,-54,-38,45,43,50,58,-81,-54,-34,29,-33,-108,-38,40,-91,77,43,-51,-58, -74,63,-77,67,-79,51,-65,35,-57,-42,54,-70,52,-74,-69,-57,61,53,-102,-10,35,-26,61,-41,-75,-75,60,25,2,-85,-63,23,45,62,64,-84,-66,-31,31,-41,-56,59,41,-106,-29,59,-70,-70, -27,37,-76,17,-57,4,-38,34,-20,1,36,-28,25,-36,-44,6,46,18,-67,13,17,-1,25,-3,-48,-41,33,16,48,-22,-28,7,26,47,33,-34,-12,10,11,-15,13,-31,14,-55,-46,44,-14,-44, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0034509322140365839, 0.0036181753966957331, 0.0023749687243252993, 0.0061138691380620003, 0.0036574790719896555, 0.0028923465870320797, 0.0016922679496929049, 0.011487699113786221, 0.0043214969336986542, 0.0024687654804438353, 0.0022285440936684608, 0.004376294557005167, 0.0036821702960878611, 0.0043387212790548801, 0.0017354480223730206, 0.0029129853937774897, 0.0050485772080719471, 0.0030692706350237131, 0.006185297854244709, 0.0020907118450850248, 0.0024968700017780066, 0.0022144652903079987, 0.0040807854384183884, 0.0054367003031075001, 0.0019426938379183412, 0.002993857953697443, 0.0022696796804666519, 0.0016959517961367965, 0.012206505052745342, 0.0052131256088614464, 0.0028271863702684641, 0.012537902221083641, 0.0045766197144985199, 0.0083922296762466431, 0.0028176016639918089, 0.0026679316069930792, 0.0033366929274052382, 0.0027530910447239876, 0.0037180078215897083, 0.0042367614805698395, 0.001925988937728107, 0.0084181344136595726, 0.011530485935509205, 0.0023159261327236891, 0.007573575247079134, 0.0020428595598787069, 0.0021164286881685257, 0.0020384052768349648, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 14286, 635, 18967, 112, 17344, -911, 41966, 336, 10140, 33973, 6005, 24046, -367, 12752, 40998, 24173, 699, -902, 4050, 43364, 782, 19857, 1094, 16643, 19007, 35434, 1622, -372, -316, 12588, 23995, 42, -391, 513, 3057, 19881, 8614, 28018, 3432, 14710, 27907, 2132, 692, 17016, -232, 4691, 40575, 27527, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.1198406405746937e-05, 8.5133542597759515e-05, 5.5881617299746722e-05, 0.00014385575195774436, 8.6058331362437457e-05, 6.8055218434892595e-05, 3.9818070945329964e-05, 0.00027029879856854677, 0.00010168228618567809, 5.8088600781047717e-05, 5.2436331316130236e-05, 0.0001029716368066147, 8.6639302026014775e-05, 0.00010208756430074573, 4.0834071114659309e-05, 6.8540837673936039e-05, 0.00011879005614900962, 7.2218135755974799e-05, 0.00014553642540704459, 4.9193222366739064e-05, 5.8749883464770392e-05, 5.2105067879892886e-05, 9.6018484327942133e-05, 0.00012792236520908773, 4.5710443373536691e-05, 7.0443718868773431e-05, 5.3404230129672214e-05, 3.9904749428387731e-05, 0.00028721187845803797, 0.00012266177509445697, 6.6522035922389477e-05, 0.00029500946402549744, 0.00010768516949610785, 0.00019746423640754074, 6.6296510340180248e-05, 6.27748595434241e-05, 7.8510420280508697e-05, 6.477861461462453e-05, 8.7482541857752949e-05, 9.968850645236671e-05, 4.5317388867260888e-05, 0.00019807375792879611, 0.0002713055582717061, 5.449238233268261e-05, 0.00017820177890826017, 4.8067286115838215e-05, 4.9798323743743822e-05, 4.796247958438471e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 27,42,21,-38,72,72,-49,62,-13,115,4,50,-35,40,-15,40,33,86,37,-60,-74,77,-4,49,53,46,37,59,-49,-41,-9,84,-31,12,-74,58,47,-127,-34,13,15,-33,66,-6,-7,-57,-58,-13, 
  /* [1][0][][] */ -52,8,-79,-41,13,90,-56,22,-15,-37,-40,37,56,-18,-31,-28,-25,-30,-4,16,-62,40,-98,-43,-53,-40,51,67,-26,-30,44,-38,11,-54,-30,51,7,-57,127,-34,-25,33,-48,-20,35,53,33,20, 
  /* [2][0][][] */ 2,5,60,-36,-16,-76,14,17,91,78,-67,17,111,-49,127,78,-68,-21,-29,35,78,-72,-39,-99,12,-34,32,-65,39,49,-42,9,30,-31,54,44,-58,13,-2,-32,34,25,64,-11,18,-83,95,-52, 
  /* [3][0][][] */ 43,8,-23,-25,38,112,14,-13,42,-42,22,-23,-47,5,14,44,-40,-68,33,-120,-12,-1,-28,-17,-41,93,127,65,-7,-30,29,44,59,-34,90,38,-39,-57,-4,37,26,12,-16,6,18,26,-12,-20, 
  /* [4][0][][] */ 96,-5,11,-50,89,84,46,5,62,-11,-108,34,46,-24,21,-16,-90,-116,-22,-91,-25,31,-44,-37,-80,127,-102,122,-56,-48,24,76,41,-47,10,-29,3,16,-22,21,-45,-10,1,53,-47,98,-28,-51, 
  /* [5][0][][] */ 4,-10,-59,12,-19,54,23,-27,62,58,39,96,54,-23,32,0,-35,127,-15,32,12,0,-71,-17,35,0,-71,-38,-11,33,18,-15,-40,6,38,15,-43,2,-88,-1,89,-20,29,47,-19,8,-42,30, 
  /* [6][0][][] */ 64,9,15,68,13,-23,109,-55,1,60,125,103,48,40,-44,58,32,-39,-80,79,51,-61,-39,58,-88,82,79,-4,113,46,-31,5,99,-66,-115,-13,102,35,3,-4,15,59,65,-26,69,127,33,-10, 
  /* [7][0][][] */ -97,1,-21,24,-55,-55,21,52,83,116,-59,-65,-91,13,-13,-18,-81,98,5,123,-52,43,20,35,-18,-97,-35,-83,28,45,-9,9,-15,10,11,-15,1,-56,127,11,9,42,27,-12,62,67,-26,2, 
  /* [8][0][][] */ -6,-88,48,-63,55,-59,66,-41,-30,-109,24,13,-31,0,31,32,3,4,-41,108,-1,40,-28,24,68,-8,-62,-37,-127,-16,-56,-124,7,-60,-4,88,2,33,103,14,20,-7,67,115,-16,-76,-42,85, 
  /* [9][0][][] */ 20,-31,29,-64,42,76,-34,49,13,-39,-37,-12,26,-56,112,-9,18,-114,36,35,-72,45,53,-43,-17,-77,-20,70,45,74,-40,-20,-43,24,-11,127,-18,-43,-58,-21,-24,2,39,108,60,81,-68,18, 
  /* [10][0][][] */ -16,18,-25,-6,21,25,-61,-39,47,39,65,-4,-36,-8,44,-51,-56,127,3,48,4,-14,16,27,-45,42,5,93,33,2,-32,-9,67,12,-8,23,-14,-48,-32,18,-82,1,23,-19,22,44,32,29, 
  /* [11][0][][] */ -32,50,-19,38,26,52,-4,4,12,26,-127,-68,67,20,-11,-44,-3,23,-41,-40,-12,-6,99,5,46,19,-13,35,-6,32,-9,41,21,0,-50,4,44,79,98,21,32,-29,54,-2,-56,-22,84,6, 
  /* [12][0][][] */ -64,-2,32,21,-64,-57,4,-1,-36,-25,-127,17,63,-90,19,35,43,99,84,-113,-33,44,-47,-78,-2,-7,31,-30,14,22,-22,70,61,81,35,-34,-53,-31,33,3,-32,12,59,-4,34,-17,-41,-37, 
  /* [13][0][][] */ -56,-113,-46,-96,16,23,59,17,-111,22,118,-71,46,44,117,4,112,25,-9,-97,77,-78,127,7,-75,4,-19,14,-40,-110,-104,18,44,-31,-66,58,26,-60,77,-67,-11,54,59,33,54,-25,98,-65, 
  /* [14][0][][] */ 65,18,-48,-1,-40,14,-84,-24,-28,53,50,42,-12,-65,15,-43,47,-116,18,11,83,-53,29,-7,-5,120,-86,-2,-63,-36,-95,1,127,42,92,-23,-78,12,-26,61,-12,-43,109,-21,-55,-49,-57,52, 
  /* [15][0][][] */ -59,14,40,19,94,2,4,40,26,69,-21,51,52,-13,-31,-16,5,33,-1,-41,28,-46,-44,-50,49,-70,-33,58,-35,0,13,15,-54,-3,127,-2,-96,13,56,-10,-46,-18,21,-2,-27,-29,-11,8, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0060825152322649956, 0.0065541784279048443, 0.0059426943771541119, 0.0088781788945198059, 0.0041331415995955467, 0.0059469784609973431, 0.0044951615855097771, 0.0062578348442912102, 0.0038185520097613335, 0.0049237529747188091, 0.0062398221343755722, 0.0086814872920513153, 0.0041563115082681179, 0.0042718932963907719, 0.0049276058562099934, 0.005902477540075779, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -4776, 10674, -19681, 694, 10531, -14662, -39680, -9721, -5952, 6428, -14984, -13051, 5578, -9800, -2126, -1492, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00014311801351141185, 0.00015421595890074968, 0.00013982810196466744, 0.00020889833103865385, 9.7250391263514757e-05, 0.00013992890308145434, 0.00010576850763754919, 0.00014724317588843405, 8.9848283096216619e-05, 0.00011585301399463788, 0.00014681935135740787, 0.00020427029812708497, 9.7795564215630293e-05, 0.0001005151352728717, 0.0001159436724265106, 0.0001388818200211972, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 47,8,-6,64,-127,-23,88,42,51,88,-25,32,6,-7,28,73, 
  /* [1][0][][] */ -32,19,-109,13,127,112,1,3,-44,6,-60,32,-59,107,-54,-34, 
  /* [2][0][][] */ -56,81,86,-8,55,84,11,56,31,-16,54,-4,81,-127,-6,27, 
  /* [3][0][][] */ 127,-20,18,5,35,35,-6,23,27,45,-51,-9,-46,61,-34,66, 
  /* [4][0][][] */ -64,-20,13,22,-127,-15,-82,-58,-20,40,-21,-65,-6,8,-44,106, 
  /* [5][0][][] */ -86,7,34,-3,127,41,13,3,-41,36,-27,10,-61,46,-90,-47, 
  /* [6][0][][] */ -127,29,-48,32,-12,-74,84,12,1,-33,-51,41,12,-4,-42,14, 
  /* [7][0][][] */ 14,127,70,-86,63,32,118,12,33,18,-9,51,96,17,-13,4, 
  /* [8][0][][] */ -51,-30,-77,60,-60,80,-38,-59,18,-47,84,34,127,38,-96,18, 
  /* [9][0][][] */ -22,-127,-19,80,-40,-65,-9,60,49,41,4,59,-74,9,-5,-31, 
  /* [10][0][][] */ -57,-64,-81,70,-94,127,66,-90,1,-49,51,-59,46,115,-84,78, 
  /* [11][0][][] */ -60,-127,-35,21,-5,73,16,30,23,5,31,-87,24,118,-99,116, 
  /* [12][0][][] */ -44,-127,-89,118,-115,-116,22,72,77,54,-30,86,4,-50,-6,0, 
  /* [13][0][][] */ -72,-31,-31,4,-10,-1,32,19,-18,127,-11,-24,43,40,17,-9, 
  /* [14][0][][] */ -92,-36,-60,-48,-15,80,-19,-86,127,-68,60,-2,88,-36,-75,-92, 
  /* [15][0][][] */ 9,-127,101,-60,-50,-36,-2,47,23,-43,-98,-35,77,-46,-28,-56, 
  /* [16][0][][] */ -24,-44,17,-36,21,24,-8,-34,46,-127,36,-28,-17,-4,-67,-89, 
  /* [17][0][][] */ -35,11,37,-92,23,3,-44,-15,95,-57,26,64,104,-71,-17,-127, 
  /* [18][0][][] */ 61,-5,-30,-114,5,-25,109,-52,33,56,-14,52,-10,60,-11,-127, 
  /* [19][0][][] */ -41,-34,-36,-49,-108,29,-22,8,24,-52,27,-127,-13,-14,-16,5, 
  /* [20][0][][] */ 21,74,65,-99,65,9,-50,88,-107,-127,39,-88,-33,114,-22,-6, 
  /* [21][0][][] */ -1,-97,-127,1,68,14,62,83,-86,-77,-6,13,93,-93,-8,39, 
  /* [22][0][][] */ 53,-9,93,-17,8,9,80,35,26,127,30,29,6,0,121,-4, 
  /* [23][0][][] */ -115,-91,-43,49,96,67,36,1,-25,23,-13,-91,10,66,65,127, 
  /* [24][0][][] */ 15,-7,62,17,33,-68,26,-47,28,127,-116,87,-2,-45,70,-60, 
  /* [25][0][][] */ 127,-51,113,115,44,1,-17,45,-115,84,48,-55,-11,25,66,-17, 
  /* [26][0][][] */ -22,20,13,35,-48,111,-16,33,-55,-30,-81,34,5,18,43,-127, 
  /* [27][0][][] */ 37,-1,-3,-55,-42,4,-83,8,-100,-21,-73,-41,-76,52,-22,127, 
  /* [28][0][][] */ -66,18,26,-8,24,-9,-127,-1,1,-30,-3,-8,13,-53,-67,-36, 
  /* [29][0][][] */ -23,-111,-24,90,-25,13,127,2,79,59,-113,64,30,-20,-54,72, 
  /* [30][0][][] */ 33,-47,-60,16,-127,15,42,-22,10,-8,6,-23,-21,56,-4,85, 
  /* [31][0][][] */ -127,-6,16,99,-35,4,-50,-8,-28,-47,12,-35,-28,-52,-31,85, 
  /* [32][0][][] */ -120,-85,-98,-12,-93,-42,5,-23,127,64,-69,-78,36,39,37,-24, 
  /* [33][0][][] */ -21,4,-101,66,-127,-118,39,0,-126,18,-62,-67,-24,104,83,82, 
  /* [34][0][][] */ 38,67,4,34,-74,-44,41,8,23,-127,-16,43,-38,3,45,94, 
  /* [35][0][][] */ 50,-13,-68,-10,-127,14,79,-50,26,57,-11,-3,20,69,48,68, 
  /* [36][0][][] */ -8,-4,-50,64,127,-22,36,76,-81,19,-76,-65,30,-17,-5,29, 
  /* [37][0][][] */ -126,56,14,-67,66,-99,-48,-16,-3,-23,-22,66,68,-80,26,-127, 
  /* [38][0][][] */ 33,114,24,-71,-110,-65,-127,-41,-53,-74,48,50,-71,-104,80,0, 
  /* [39][0][][] */ 21,-48,1,82,12,76,74,-52,-21,57,3,-29,-16,127,57,112, 
  /* [40][0][][] */ 104,55,97,112,-43,-50,-4,10,-87,86,-18,-3,-54,-12,127,4, 
  /* [41][0][][] */ -18,-17,16,47,-89,110,-1,48,-50,29,-118,1,30,26,55,-127, 
  /* [42][0][][] */ -11,-118,34,-24,127,30,76,40,-38,-111,-85,-24,-39,-5,-1,35, 
  /* [43][0][][] */ -53,-87,-49,10,107,20,2,86,-87,-84,-124,-91,127,3,-53,73, 
  /* [44][0][][] */ -30,-56,-94,-88,28,73,60,-1,-39,-127,-51,67,-61,49,34,112, 
  /* [45][0][][] */ -1,-44,-53,-2,-127,63,-36,-66,61,-43,21,-42,-14,17,-29,38, 
  /* [46][0][][] */ 22,-78,3,-18,98,-59,-11,94,15,-24,38,72,-27,-52,63,-127, 
  /* [47][0][][] */ -87,-24,-17,89,-27,9,42,20,0,127,91,80,-43,92,-10,112, 
  /* [48][0][][] */ 41,-10,-81,-93,28,-68,7,51,37,-74,4,29,-66,3,-42,-127, 
  /* [49][0][][] */ 60,31,13,34,-15,-30,42,49,-37,127,-40,48,-34,-28,69,80, 
  /* [50][0][][] */ 4,-4,11,8,-127,-21,-13,-48,52,21,19,52,-23,-59,21,-2, 
  /* [51][0][][] */ 1,-28,-31,-127,-39,116,59,-66,-7,-15,49,-64,62,98,-31,29, 
  /* [52][0][][] */ 17,-23,-4,-73,71,-109,0,-25,30,-5,127,-56,37,15,-29,93, 
  /* [53][0][][] */ -47,-61,41,-27,-48,-127,25,-109,-9,85,-97,74,-30,-22,33,-80, 
  /* [54][0][][] */ 42,53,13,-16,-127,-38,-70,-75,-33,-3,47,48,-67,-58,48,15, 
  /* [55][0][][] */ 11,8,-30,78,-33,16,31,-23,-4,127,11,51,-6,-5,2,42, 
  /* [56][0][][] */ 66,-116,-88,82,-100,34,-10,40,127,22,34,43,-32,-82,77,83, 
  /* [57][0][][] */ 42,25,74,-109,70,5,-9,3,110,-68,30,127,66,-67,104,-55, 
  /* [58][0][][] */ 64,-72,12,-86,43,34,0,127,64,80,-9,66,63,14,87,-11, 
  /* [59][0][][] */ -46,38,33,-25,3,-97,-13,5,5,26,-101,-87,-127,-44,68,-9, 
  /* [60][0][][] */ 50,-31,40,27,8,-29,8,-47,30,127,-16,73,-4,-27,-5,-21, 
  /* [61][0][][] */ 76,56,7,-29,-106,-127,-18,-70,-69,-23,-32,4,-75,-52,90,89, 
  /* [62][0][][] */ -36,92,-52,52,-70,127,-50,32,-74,3,-39,32,-46,63,75,-90, 
  /* [63][0][][] */ 27,-8,-78,-127,-26,-51,91,-15,-9,-108,-26,29,-44,74,38,-32, 
  /* [64][0][][] */ -34,30,5,-19,43,-59,24,73,-127,-10,-58,-25,-30,71,49,69, 
  /* [65][0][][] */ -75,-21,-45,-5,72,25,-50,-71,-127,-57,0,-31,-119,109,-50,54, 
  /* [66][0][][] */ -17,58,-25,36,-49,127,-25,22,-68,20,-28,42,-38,51,52,-82, 
  /* [67][0][][] */ 25,-37,-37,-14,14,-105,51,-84,-3,34,5,126,-75,-31,-17,-127, 
  /* [68][0][][] */ 8,-127,-26,79,-5,8,36,89,41,40,57,12,-71,40,-26,-18, 
  /* [69][0][][] */ -18,95,76,-124,43,15,-33,127,33,90,84,123,111,-95,14,-121, 
  /* [70][0][][] */ 42,33,46,-33,104,9,-97,-47,-127,-90,2,53,-32,65,-105,-6, 
  /* [71][0][][] */ -13,-69,38,-54,75,-9,38,25,-75,95,-127,-35,16,80,-7,45, 
  /* [72][0][][] */ 11,21,66,21,-78,-43,-123,-70,-16,69,-24,78,27,127,-122,-3, 
  /* [73][0][][] */ -5,-37,-28,-38,28,-112,30,-52,66,79,105,-22,12,-12,-61,127, 
  /* [74][0][][] */ 8,4,-38,86,-89,-4,98,22,80,69,40,127,121,35,-63,10, 
  /* [75][0][][] */ -30,42,-38,27,-61,127,-7,15,-44,28,-34,30,-30,49,31,-67, 
  /* [76][0][][] */ -60,89,-69,51,-109,5,8,12,38,49,-52,-45,55,-67,-127,31, 
  /* [77][0][][] */ 116,121,-127,124,72,66,70,64,45,10,127,-27,67,37,67,25, 
  /* [78][0][][] */ 15,-36,-10,-61,62,-127,35,-58,44,41,126,-33,0,-13,-38,125, 
  /* [79][0][][] */ -40,61,-5,26,-4,-49,-37,3,-127,-9,53,3,93,36,-78,-39, 
  /* [80][0][][] */ -78,24,71,12,61,35,-17,-127,-77,70,-68,-49,-16,-94,21,61, 
  /* [81][0][][] */ 90,75,-15,-3,33,-29,69,104,-99,127,-69,-37,-47,26,111,111, 
  /* [82][0][][] */ 68,121,-27,-76,-15,-65,114,-118,30,37,-82,85,127,-27,85,-60, 
  /* [83][0][][] */ 9,-41,23,30,13,20,-39,-81,75,-31,88,15,43,-62,-38,-127, 
  /* [84][0][][] */ -127,-90,-52,-28,-6,114,97,-12,96,84,102,103,55,98,-96,-1, 
  /* [85][0][][] */ 101,2,118,-99,85,14,-8,89,22,117,-69,-10,-37,63,127,14, 
  /* [86][0][][] */ -77,80,-34,-4,28,93,20,14,99,43,127,-33,-22,64,-11,-25, 
  /* [87][0][][] */ 12,-58,27,-50,47,-127,26,-37,49,-6,63,-34,33,-44,-39,66, 
  /* [88][0][][] */ -85,61,36,-3,112,-23,31,19,-59,-69,108,-75,68,127,99,-122, 
  /* [89][0][][] */ -24,34,-8,32,-24,127,-16,37,-46,13,-42,24,-5,61,31,-93, 
  /* [90][0][][] */ 47,-78,34,19,123,-4,59,33,-13,-103,-127,-30,0,-9,-54,36, 
  /* [91][0][][] */ -1,69,-33,-25,-9,-75,-87,38,-85,20,-97,-113,-127,-77,6,13, 
  /* [92][0][][] */ 86,56,81,40,-127,-97,13,-3,-17,45,-43,-27,-16,-88,30,-8, 
  /* [93][0][][] */ -2,-127,-101,56,-32,-49,-4,111,77,57,3,63,-43,32,-10,-27, 
  /* [94][0][][] */ 99,14,127,-28,24,-29,21,40,27,81,1,62,21,10,126,-9, 
  /* [95][0][][] */ -41,-39,-13,-32,127,2,38,56,-24,0,-109,-49,26,-4,-58,14, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0049725314602255821, 0.0021055201068520546, 0.004364632535725832, 0.0046118334867060184, 0.002417062409222126, 0.001506866654381156, 0.0037810418289154768, 0.0022291289642453194, 0.0013429358368739486, 0.0032359433826059103, 0.0009397061076015234, 0.002066740533336997, 0.00244882982224226, 0.0063697858713567257, 0.0025912211276590824, 0.0023314340505748987, 0.0033964295871555805, 0.002217103261500597, 0.0027828279417008162, 0.0015343161066994071, 0.0033414578065276146, 0.002087239408865571, 0.0023460083175450563, 0.0027773829642683268, 0.0013522346271201968, 0.0027332073077559471, 0.0038681940641254187, 0.0035650637000799179, 0.0025729103945195675, 0.0040479628369212151, 0.0028974630404263735, 0.0021769448649138212, 0.0038021276704967022, 0.0011726786615327001, 0.0023890126030892134, 0.0036855572834610939, 0.003301805118098855, 0.0034223671536892653, 0.0019195573404431343, 0.00303420121781528, 0.00097030523465946317, 0.003161486703902483, 0.0025685720611363649, 0.0025465940125286579, 0.0023337854072451591, 0.0018885054159909487, 0.0019185288110747933, 0.0015292069874703884, 0.0040122829377651215, 0.0034761996939778328, 0.0041698142886161804, 0.0018987866351380944, 0.0037789109628647566, 0.0023578028194606304, 0.0019032903946936131, 0.0058194776065647602, 0.0031259446404874325, 0.0009566890075802803, 0.0021767837461084127, 0.0037487640511244535, 0.0026196616236120462, 0.0014770550187677145, 0.0027979535516351461, 0.0043019941076636314, 0.0012687192065641284, 0.001070223399437964, 0.0045782579109072685, 0.0030507666524499655, 0.0022872246336191893, 0.0018880481366068125, 0.0049930824898183346, 0.0023921944666653872, 0.0029453346505761147, 0.0032276182901114225, 0.0037973774597048759, 0.0039764866232872009, 0.0033571356907486916, 0.0015950578963384032, 0.003219490172341466, 0.0020592366345226765, 0.0024455653037875891, 0.0028943333309143782, 0.0015856174286454916, 0.0013357367133721709, 0.0023731787223368883, 0.0011693835258483887, 0.0024128553923219442, 0.004648259375244379, 0.0043135778978466988, 0.00429583340883255, 0.0029095103964209557, 0.0015411048661917448, 0.0025184992700815201, 0.0026641443837434053, 0.0017013981705531478, 0.0022718079853802919, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 877, 5557, -26, 1342, 4519, 9396, 202, 2114, 10335, -814, 15013, 3774, 2340, 415, 3373, 532, 2905, 4670, -66, 9042, 1237, 5655, -1582, 1343, -8034, 1198, 2072, 1658, 5328, 1018, 3205, 4150, 1914, 11306, 3640, 2665, 2630, 2047, 4002, 2160, 15313, 1550, 2558, 1178, 2550, 7263, 6230, 7938, 1265, -1182, 1507, 5910, 2003, -2693, 6274, 169, 1413, 14900, 1818, 1039, 2621, 9130, 3431, -276, 12176, 13061, 1401, 3219, 5283, 4437, 1576, 1485, -3006, 2906, 1577, 2438, 354, 8042, 2766, 6399, 2862, 903, 4844, 11221, -60, 10070, 4592, 1363, -642, 2187, 1159, 9127, 3224, 2655, 5009, 4590, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00031259644310921431, 0.00013236278027761728, 0.00027438107645139098, 0.00028992127045057714, 0.00015194776642601937, 9.4728638941887766e-05, 0.00023769385006744415, 0.00014013340114615858, 8.4423183579929173e-05, 0.00020342643256299198, 5.9074292948935181e-05, 0.00012992491247132421, 0.00015394482761621475, 0.00040043433546088636, 0.00016289620543830097, 0.00014656478015240282, 0.00021351534815039486, 0.00013937741459812969, 0.00017494149506092072, 9.6454241429455578e-05, 0.0002100595593219623, 0.00013121357187628746, 0.00014748098328709602, 0.00017459920491091907, 8.5007748566567898e-05, 0.00017182211740873754, 0.00024317264615092427, 0.00022411646205000579, 0.00016174510528799146, 0.00025447376538068056, 0.00018214799638371915, 0.00013685287558473647, 0.00023901941312942654, 7.3720031650736928e-05, 0.00015018443809822202, 0.00023169125779531896, 0.00020756681624334306, 0.00021514590480364859, 0.00012067229545209557, 0.00019074398733209819, 6.0997896071057767e-05, 0.00019874573627021164, 0.00016147237329278141, 0.00016009072714950889, 0.00014671259850729257, 0.00011872022150782868, 0.00012060763401677832, 9.6133058832492679e-05, 0.00025223076227121055, 0.00021853006910532713, 0.00026213389355689287, 0.00011936655209865421, 0.00023755989968776703, 0.000148222447023727, 0.00011964967416133732, 0.00036583939800038934, 0.00019651140610221773, 6.0141916037537158e-05, 0.00013684274745173752, 0.00023566473100800067, 0.0001646840973990038, 9.2854541435372084e-05, 0.00017589236085768789, 0.00027044332819059491, 7.9757584899198264e-05, 6.727921572746709e-05, 0.00028781057335436344, 0.0001917853660415858, 0.00014378556807059795, 0.00011869148147525266, 0.00031388836214318871, 0.00015038445417303592, 0.00018515741976443678, 0.00020290308748371899, 0.00023872079327702522, 0.00024998042499646544, 0.00021104514598846436, 0.00010027275129687041, 0.00020239211153239012, 0.00012945318303536624, 0.00015373960195574909, 0.0001819512399379164, 9.9679280538111925e-05, 8.3970619016326964e-05, 0.00014918904344085604, 7.3512885137461126e-05, 0.00015168329991865903, 0.0002922111889347434, 0.00027117153513245285, 0.00027005604351870716, 0.00018290533625986427, 9.6881012723315507e-05, 0.00015832456119824201, 0.00016748049529269338, 0.00010695779201341793, 0.00014281641051638871, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -22,0,-12,-28,87,-7,38,-19,-8,2,-14,-27,-31,3,-3,-29,-25,15,9,-13,0,29,35,54,12,-25,-25,2,18,3,17,-1,-22,3,11,-38,-2,-83,-39,23,1,-13,30,-24,-20,33,-76,-26,-25,13,4,51,-65,5,43,-20,1,-18,4,-11,1,-17,-7,-41,-21,-12,-44,-23,-26,27,-3,2,18,7,0,2,-38,5,127,-11,-102,8,-112,-21,-30,-7,26,27,-25,-15,-4,-34,-3,34,-35,9, -8,40,35,-78,-51,-12,127,-52,-4,-10,-40,3,-103,-4,-92,79,-22,71,79,-26,2,127,79,127,30,1,52,71,127,42,127,-39,-127,-14,-84,-41,-23,-112,127,-40,-25,-127,-21,-38,64,-35,-41,-19,49,5,28,127,-104,47,-77,-8,-95,-13,-10,26,-13,-127,-126,-47,-55,9,-6,-114,-15,17,-60,113,-127,-3,17,-19,-99,-87,-5,-68,-127,5,16,-67,120,78,-67,42,-127,-10,4,-15,10,121,-64,-87, -25,3,-14,-10,47,-7,53,-34,-22,12,-14,-16,-29,-1,-4,-32,-21,9,-20,-20,3,12,37,37,5,-14,7,-13,24,10,11,5,-19,1,-10,55,-4,-94,-32,47,-4,-12,15,-16,-7,-35,-59,-39,-19,3,2,36,-4,-1,28,-22,79,-26,9,-21,-2,-7,-46,-4,-33,-27,127,-48,-13,19,-7,15,7,6,18,23,-19,25,-41,-3,-89,0,-127,-28,0,-21,20,-21,-27,-43,-13,41,5,36,-31,18, 
  /* [0][1][][] */ -78,1,21,-58,52,91,-30,-27,-5,-10,-28,-25,-125,29,17,59,-22,38,98,24,24,-14,127,-22,50,18,60,19,-10,-1,-5,-29,-123,-10,74,-29,-8,-127,-59,-127,-18,-14,90,-44,-69,127,-75,-87,58,72,14,-51,-122,68,85,-39,35,-38,34,-12,20,-12,83,-85,-41,19,-27,-88,-7,-7,-127,20,59,123,10,-64,-127,-64,-67,-65,-72,-7,-34,-57,42,30,-87,68,-65,127,102,-80,127,5,-60,0, 79,127,127,127,-127,-127,95,-64,127,127,-80,-70,-127,127,-26,127,127,-127,127,127,127,-73,61,-108,-127,-127,127,127,-114,127,-21,127,-73,127,127,-92,127,109,7,-19,127,-9,-127,-114,127,-14,127,127,127,-127,127,-115,114,127,-127,127,-125,127,-127,127,-103,123,101,-127,127,127,-17,127,-93,-127,-21,-127,2,127,127,73,22,-127,90,-127,25,127,112,127,127,64,-127,127,-92,47,8,-19,-84,-26,-127,-30, -127,-28,28,-78,8,51,-43,-1,-37,-14,-7,127,-118,25,27,66,-30,44,72,16,13,-18,63,-23,44,-1,44,4,-3,-3,20,-16,-103,-27,74,127,-6,-95,-74,-91,-31,-26,25,-48,-57,-69,-66,-122,41,80,-5,-32,127,12,113,-54,127,-34,47,-46,2,-35,-127,-51,-79,-5,-58,-101,-10,2,-111,6,24,-95,16,127,-68,-49,-59,6,-104,-14,-73,-81,-6,29,-69,46,-22,-87,127,127,-40,-21,-68,0, 
  /* [0][2][][] */ -15,-37,-32,-15,36,-6,-8,7,-12,10,29,-20,93,4,-4,-48,-10,-2,-42,-18,-15,-19,31,-24,11,-26,-10,7,5,-7,-37,-3,5,0,2,-32,-1,-66,-16,-10,-25,-2,34,4,15,9,-69,-5,-37,12,-20,-28,-6,-28,47,-27,15,-27,7,-22,6,11,5,-8,-43,-13,122,20,35,24,-1,6,-10,-19,-5,-22,-33,26,-34,-18,-16,6,-96,-14,-1,4,46,-16,-6,1,9,-17,-10,-19,-30,0, -23,-57,21,-107,-43,-5,39,127,-55,73,127,-23,-91,26,127,100,-23,-37,75,-46,-21,-37,99,18,12,-14,31,17,-5,7,-103,-58,-80,-26,-95,-11,-84,-126,49,-65,-19,-112,-32,127,19,-25,-60,-9,13,-2,-3,-15,56,41,-48,-47,-65,-56,41,-56,127,24,96,-13,-95,-37,-24,-58,127,25,-39,25,14,-34,23,-22,-18,-32,-4,43,-90,-21,-86,-78,51,-127,-1,17,-12,-4,52,2,19,-127,-63,127, -20,7,-26,-25,27,-17,-1,8,-21,0,13,44,100,-1,-1,-28,-12,12,-26,-25,-14,-8,13,-4,2,-30,-9,-5,2,0,-45,0,6,4,-8,-5,-8,-82,-21,8,-30,-4,10,6,13,-15,-65,2,-32,3,-14,-23,4,-28,36,-26,53,-19,13,-26,10,9,-13,0,-36,-16,-27,14,41,9,-12,8,-51,-46,-2,-15,-22,16,95,-1,-25,-3,-66,-10,-15,5,52,12,15,-3,-21,21,5,-26,-20,-3, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0049571716226637363, 0.014046110212802887, 0.011657172814011574, 0.0053465045057237148, 0.012025292962789536, 0.022692736238241196, 0.0044255680404603481, 0.010053243488073349, 0.017303338274359703, 0.0098574738949537277, 0.014002767391502857, 0.0087719913572072983, 0.0034262975677847862, 0.0067589306272566319, 0.011327346786856651, 0.0076161748729646206, 0.014167353510856628, 0.019688528031110764, 0.0049243224784731865, 0.017973287031054497, 0.0094640422612428665, 0.012834219262003899, 0.0038047449197620153, 0.0096167763695120811, 0.085364550352096558, 0.0053388429805636406, 0.010713325813412666, 0.0058999797329306602, 0.016692321747541428, 0.0072468533180654049, 0.0067239846102893353, 0.016227392479777336, 0.0032640455756336451, 0.020783375948667526, 0.0067752436734735966, 0.0085577322170138359, 0.018529530614614487, 0.0036727141123265028, 0.011930369772017002, 0.0048999283462762833, 0.031771834939718246, 0.0078413095325231552, 0.014180266298353672, 0.0068462714552879333, 0.0070371134206652641, 0.013765857554972172, 0.0064174695871770382, 0.0098235961049795151, 0.0086380317807197571, 0.020688675343990326, 0.011336492374539375, 0.0096090938895940781, 0.0073168538510799408, 0.012673472985625267, 0.01469967607408762, 0.012319005094468594, 0.0075486302375793457, 0.019505651667714119, 0.023320335894823074, 0.014155506156384945, 0.013015890493988991, 0.014232604764401913, 0.0081884944811463356, 0.0046652345918118954, 0.010744601488113403, 0.021379247307777405, 0.0057831956073641777, 0.0051372712478041649, 0.0094677247107028961, 0.019897317513823509, 0.005590848159044981, 0.013341207057237625, 0.020990170538425446, 0.008156266063451767, 0.0058247991837561131, 0.0098788021132349968, 0.002909340662881732, 0.0066601792350411415, 0.006058557890355587, 0.007643518503755331, 0.0034885790664702654, 0.013047393411397934, 0.0037120082415640354, 0.012867302633821964, 0.0038015020545572042, 0.014013759791851044, 0.00658413115888834, 0.009656873531639576, 0.0051521235145628452, 0.011817540042102337, 0.0052320589311420918, 0.013330604881048203, 0.018433393910527229, 0.007296029943972826, 0.0031905206851661205, 0.016224030405282974, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 8172, -1146, -3162, 9017, -53, 1948, 334, 155, 2476, -4439, 993, -1616, 10982, -3294, -1997, -6780, 2281, -571, -10600, -1276, -2561, -264, -7304, -938, -53, 10169, -9775, -5315, -1793, -3333, 656, 568, 18697, -670, -1966, 465, 126, 16957, 2332, 8823, 209, 6980, -136, 5587, 518, 641, 11404, 3821, -4674, -613, -3861, 1126, -264, -3180, -3433, 3205, -791, 4721, 58, 1742, -1435, 963, 358, 8342, 11620, -2302, 11849, 13924, -2139, 45, 9310, -2020, 374, 1171, -4183, -569, 18920, 9603, 9622, 9204, 14907, -1288, 10999, 10037, -699, -2056, 7277, -8025, 8698, 759, -7022, -1526, -946, 1456, 21818, -1869, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00011564811575226486, 0.00032768808887340128, 0.00027195550501346588, 0.00012473104288801551, 0.00028054352151229978, 0.00052940915338695049, 0.00010324609320377931, 0.00023453669564332813, 0.00040367746260017157, 0.00022996950428932905, 0.00032667693449184299, 0.00020464578119572252, 7.9933655797503889e-05, 0.00015768216690048575, 0.00026426083059050143, 0.0001776812132447958, 0.00033051663194783032, 0.0004593226476572454, 0.00011488176096463576, 0.0004193070053588599, 0.0002207909565186128, 0.00029941534739919007, 8.8762630184646696e-05, 0.00022435415303334594, 0.0019915085285902023, 0.00012455230171326548, 0.00024993607075884938, 0.00013764332106802613, 0.00038942278479225934, 0.00016906514065340161, 0.0001568668958498165, 0.00037857622373849154, 7.6148404332343489e-05, 0.0004848648386541754, 0.00015806274313945323, 0.00019964722741860896, 0.00043228385038673878, 8.568241901230067e-05, 0.00027832904015667737, 0.00011431265738792717, 0.00074121961370110512, 0.00018293347966391593, 0.00033081788569688797, 0.00015971978427842259, 0.0001641720300540328, 0.00032114997156895697, 0.0001497160701546818, 0.00022917914611753076, 0.000201520582777448, 0.00048265553778037429, 0.00026447419077157974, 0.00022417493164539337, 0.00017069821478798985, 0.00029566523153334856, 0.00034293544013053179, 0.00028739566914737225, 0.00017610543000046164, 0.00045505622983910143, 0.00054405070841312408, 0.00033024026197381318, 0.00030365365091711283, 0.00033203890779986978, 0.00019103311933577061, 0.00010883738286793232, 0.0002506657037883997, 0.00049876619596034288, 0.00013491880963556468, 0.00011984974116785452, 0.00022087685647420585, 0.00046419358113780618, 0.0001304314355365932, 0.00031124308588914573, 0.00048968923510983586, 0.00019028125097975135, 0.0001358893932774663, 0.0002304670779267326, 6.7873334046453238e-05, 0.0001553783513372764, 0.00014134285447653383, 0.00017831912555266172, 8.138664998114109e-05, 0.00030438858084380627, 8.6599131464026868e-05, 0.00030018715187907219, 8.8686974777374417e-05, 0.00032693339744582772, 0.00015360419638454914, 0.00022528959379997104, 0.00012019623682135716, 0.00027569677331484854, 0.00012206108658574522, 0.00031099576153792441, 0.00043004105100408196, 0.00017021239909809083, 7.4433111876714975e-05, 0.00037849778891541064, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 21,34,9,14,-13,-77,-13,-5,-16,-71,8,-13,56,-68,55,28,-80,-43,37,8,79,22,-69,24,-10,69,127,69,5,71,57,-41,-2,0,6,-15,26,40,-15,-4,120,19,26,-19,-11,-1,12,-38,38,-31,96,0,-75,-3,51,39,-2,-37,9,17,-5,38,-65,-9,16,5,70,30,-7,-26,18,37,12,42,7,36,60,-28,54,23,-11,45,38,36,-47,3,-13,72,22,3,-90,-15,23,17,108,61, 
  /* [1][0][][] */ 15,41,-37,-18,-4,-50,104,-87,-69,-39,-74,-38,-6,-47,-3,-50,-27,-27,-38,-19,-15,-106,117,-33,-4,18,3,70,-60,13,-37,22,-45,27,18,6,-19,48,-61,85,31,4,12,-57,63,-59,-5,31,-91,0,56,-115,-41,50,60,76,32,19,-56,16,-44,1,-11,-28,21,29,106,17,-53,-127,19,7,19,60,-28,22,-62,-30,105,-36,29,-19,45,-69,-28,-72,-16,12,-27,-40,40,6,81,-70,-31,56, 
  /* [2][0][][] */ 8,-9,2,-14,72,44,-58,28,-56,41,9,-36,38,-12,12,33,33,-36,-127,-9,-20,-31,-14,37,-8,-17,-43,14,-42,-24,-19,70,-16,-40,-3,18,-52,37,-28,-18,73,21,-1,47,4,69,5,-3,-83,4,-14,25,-28,51,23,-67,47,27,34,31,-24,-8,-21,62,48,-2,-31,-7,-2,-11,-19,-33,24,54,26,79,-56,-8,-22,-31,44,41,60,-10,-12,-46,-12,-47,-12,-42,-7,78,-5,-1,88,-46, 
  /* [3][0][][] */ 31,-26,-45,-112,2,-26,107,-28,28,115,-79,-29,7,-19,-30,57,63,24,-15,25,-52,38,13,27,-58,80,46,-8,-48,-15,-60,60,1,-18,24,-20,-2,-32,-25,59,4,17,-35,29,54,-41,-5,42,49,-30,34,-28,95,36,44,-12,18,-17,-12,-45,-33,32,67,1,-21,-16,123,-40,-34,-25,-58,23,22,-56,3,-57,18,-44,127,0,7,-49,-31,-33,-29,-48,69,82,-36,35,-56,4,6,-73,-19,19, 
  /* [4][0][][] */ -31,82,23,10,-7,7,-37,-17,21,-35,5,-29,24,46,-25,19,-5,-54,-12,-73,22,-23,-70,27,-35,-34,-19,15,-42,127,-48,-22,7,-44,1,-28,67,59,-37,5,20,7,8,-33,-49,0,64,-17,32,-14,-55,1,-70,29,57,21,11,67,-29,15,-31,-65,-22,10,60,26,-60,-13,8,-7,4,-67,-4,66,57,72,-41,22,-57,42,23,69,33,-50,46,-69,-27,-64,-34,-54,-43,-6,3,13,34,-33, 
  /* [5][0][][] */ -11,-12,32,-26,-7,-19,-16,5,34,4,-14,-11,-13,-25,10,-14,-11,0,-43,-30,-24,20,-14,14,25,-45,60,-21,-2,39,8,66,-2,-77,13,8,-31,-20,-27,2,-50,-4,-23,20,4,17,-68,25,-17,24,43,-8,20,-67,14,5,-19,-46,6,-32,41,25,21,48,-34,7,109,-26,-2,-27,7,16,3,19,31,5,1,-6,127,40,-23,-7,-26,28,34,59,9,86,8,-33,-1,13,12,-9,-35,17, 
  /* [6][0][][] */ 23,-69,93,14,-49,127,-53,-93,-25,-71,-80,61,3,16,-22,85,1,56,6,-49,-81,-27,-81,-74,21,-59,-15,77,-125,46,-16,-26,55,95,-24,-6,0,-60,26,-27,-70,45,56,-39,22,44,-120,-5,43,14,-100,-127,91,6,-63,-15,20,-44,53,-13,-10,-49,38,1,52,-77,-85,-56,-93,30,-24,-84,-29,-94,32,-104,99,-7,-89,38,-33,88,20,-107,74,-31,-30,6,-90,80,-99,91,40,-59,65,-98, 
  /* [7][0][][] */ -10,-4,-51,52,-24,-6,34,-1,-89,-1,77,45,5,-55,-17,-31,-12,-8,6,-7,-53,-18,-33,-31,71,37,0,64,-12,30,15,23,-47,-127,23,95,-7,28,-44,9,1,-15,12,-67,24,49,71,86,-15,56,-40,18,22,-37,58,-51,-11,44,-71,-21,57,12,2,-30,76,-56,109,-19,-50,-31,68,13,-6,-32,-76,-26,33,-32,99,-28,-5,3,-67,-23,41,18,-67,47,-5,13,17,39,59,-1,78,-3, 
  /* [8][0][][] */ -9,-48,-6,5,-7,-6,14,-7,-12,-7,44,32,15,26,-45,-9,70,-7,18,2,-15,-67,-37,-17,-31,-31,63,0,-22,40,3,-32,-12,-3,-3,4,-46,-8,14,-20,-7,45,16,-30,10,-18,27,-9,39,-3,45,8,-3,9,-29,-8,-8,106,-67,-2,-21,-62,-57,0,-72,-33,-14,12,-4,5,27,-24,-22,-127,37,-96,11,17,-51,22,-23,-5,6,60,56,-56,-35,46,-28,80,15,-11,-52,-1,-4,-58, 
  /* [9][0][][] */ -25,-35,-33,22,7,20,6,37,-37,-2,67,60,-30,47,23,-36,-6,38,-18,-36,3,37,-12,11,-32,27,7,17,40,-5,21,-7,-19,-18,11,49,-23,-10,24,1,-4,-29,3,8,15,45,0,33,-34,4,-9,30,126,18,-21,-1,11,-14,28,13,-30,-1,84,8,15,23,65,2,35,-8,-13,21,2,-127,-37,-120,-30,-14,40,-1,-1,28,2,-44,37,16,-47,-3,-4,110,45,25,57,38,-9,34, 
  /* [10][0][][] */ 22,43,26,-8,-18,13,-42,-20,68,1,-35,27,23,4,-8,-53,-37,10,18,-4,25,-22,-12,-37,28,-27,-101,43,-15,58,-4,9,22,23,-20,-5,16,-3,2,-1,43,-12,64,-44,-26,-11,15,26,15,12,7,-31,-19,-16,-4,38,-20,6,-5,-3,-10,-34,-13,8,-6,-17,-92,-26,-49,-14,55,-9,-25,25,31,9,54,-25,-92,12,-20,38,1,-7,0,13,-65,-127,-25,29,14,25,56,-28,11,39, 
  /* [11][0][][] */ 13,-40,-1,-2,-62,36,8,6,79,-16,-29,-52,20,3,2,-5,-19,43,20,-55,1,33,17,-24,38,6,60,-6,17,-54,-30,16,29,102,-100,2,15,-10,60,19,-50,52,-27,20,-46,-5,-21,-6,49,-8,-18,-8,-25,13,-72,80,-28,-2,7,-29,21,1,-13,-54,1,-47,-127,-80,1,-25,-91,26,50,17,-11,5,45,55,-115,-29,-4,3,-11,2,-29,-8,64,77,28,-53,12,16,-39,22,70,28, 
  /* [12][0][][] */ 16,28,-46,-30,12,-19,2,36,65,-34,13,-20,-2,-22,-17,9,17,-48,-29,21,13,68,3,56,-38,-35,-127,-14,62,-26,27,1,-9,-67,66,-9,31,-2,-2,21,-5,-50,5,34,41,-5,14,-5,-64,7,-49,96,68,-30,40,-79,18,21,-27,-30,21,49,73,13,-2,-8,32,20,103,29,13,24,6,-14,-8,1,-25,-52,43,-63,32,-38,31,-31,0,3,6,-103,-3,25,-37,28,7,62,5,29, 
  /* [13][0][][] */ -15,15,-73,30,21,19,-8,5,23,73,-36,54,-55,-23,68,-51,9,63,54,14,-26,-51,-11,9,36,49,-26,28,16,40,56,-16,-21,69,1,48,22,-50,-50,-53,2,-13,26,11,48,47,-38,43,-50,29,-3,-4,-6,-43,51,44,17,-50,-10,-5,23,18,6,-30,9,94,127,44,22,4,-45,-22,30,55,-83,51,18,-76,125,-43,-12,-38,21,-3,25,56,-35,-23,-21,-21,5,47,42,8,65,57, 
  /* [14][0][][] */ -5,45,19,19,-56,-42,9,32,-81,-19,61,23,-75,-5,61,-8,-38,44,-56,20,-23,8,-86,-1,-40,-2,-49,-103,15,-5,29,70,-64,24,13,-13,-26,-82,-10,-38,26,-34,51,-25,-18,42,-81,13,-9,-42,78,20,-14,27,-41,39,-53,14,-2,43,32,50,-18,40,4,-50,0,-58,34,57,71,31,-53,27,-1,3,28,-9,30,19,-68,100,3,-127,77,-5,-2,8,-100,-6,-17,-9,-22,4,38,39, 
  /* [15][0][][] */ 67,-39,51,28,33,6,-13,-14,13,35,-52,0,62,67,1,-15,-18,21,-80,33,4,-36,26,19,75,-38,79,13,31,-24,-46,64,68,42,-7,-74,65,49,65,47,87,29,-5,-4,-44,-127,30,-37,-35,-13,-25,-9,-5,-38,-35,55,-14,4,-4,20,1,-53,-42,29,31,28,-82,40,-10,-20,-3,-6,1,-113,-38,-105,-14,17,-127,29,70,-32,42,21,-48,5,-7,-22,27,87,12,-65,-26,-38,25,-29, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0035000292118638754, 0.0023614694364368916, 0.002679833211004734, 0.0028915621805936098, 0.0036871524062007666, 0.0058710812591016293, 0.0022904081270098686, 0.0033170636743307114, 0.0048847710713744164, 0.0047545363195240498, 0.0043260687962174416, 0.0033749495632946491, 0.0033783446997404099, 0.0034556649625301361, 0.0040692528709769249, 0.0036353613249957561, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -29442, -4255, 979, -15952, 8966, -13916, 25804, -12643, 11070, -9904, 12463, 11983, -4853, -29002, 5291, 7468, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 8.2353632024023682e-05, 5.5563989008078352e-05, 6.3054903876036406e-05, 6.8036759330425411e-05, 8.6756532255094498e-05, 0.00013814309204462916, 5.3891955758444965e-05, 7.8048557043075562e-05, 0.00011493579222587869, 0.00011187144264113158, 0.00010178985394304618, 7.9410579928662628e-05, 7.9490462667308748e-05, 8.1309764937032014e-05, 9.5747127488721162e-05, 8.5537918494082987e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -38,52,-12,-7,-33,-67,-80,-21,61,-61,53,-49,88,-127,14,-118, 
  /* [1][0][][] */ -84,61,-101,-104,-67,36,-21,45,-47,-5,79,-58,42,127,8,31, 
  /* [2][0][][] */ -59,-20,-91,-4,-26,-52,38,-55,-108,120,88,17,49,71,-42,127, 
  /* [3][0][][] */ -57,-79,-3,-55,-99,12,-42,-127,-18,-3,59,-71,-60,-42,-126,-29, 
  /* [4][0][][] */ 76,12,-16,49,-57,2,-127,60,18,68,24,57,7,7,-35,-79, 
  /* [5][0][][] */ -97,63,-102,-25,48,-51,-23,-86,110,-28,11,-35,29,-127,-125,-99, 
  /* [6][0][][] */ -20,-23,-36,19,-68,92,42,-24,-28,-53,126,-31,-6,23,-127,-3, 
  /* [7][0][][] */ -24,101,127,-74,57,81,-8,-42,44,61,-83,-24,53,3,7,64, 
  /* [8][0][][] */ -58,-7,45,4,30,21,94,127,-51,1,-60,-68,46,66,-49,-57, 
  /* [9][0][][] */ 6,17,64,30,-107,-71,-73,-69,53,-10,127,24,-40,-76,35,1, 
  /* [10][0][][] */ -11,-119,18,-71,-127,64,23,29,-34,-58,-1,48,-17,59,-123,29, 
  /* [11][0][][] */ 107,-66,-9,84,-103,-41,63,-1,127,100,-43,52,26,-94,-19,111, 
  /* [12][0][][] */ -60,-70,127,-16,53,-17,18,42,58,-28,93,68,-25,8,-75,14, 
  /* [13][0][][] */ -5,-42,34,34,7,13,127,26,-79,16,8,28,-7,88,111,-74, 
  /* [14][0][][] */ 119,-101,127,0,72,67,119,51,85,71,65,38,76,-47,51,-67, 
  /* [15][0][][] */ 2,123,18,-36,39,127,-73,79,-39,-12,-47,-21,-33,105,-30,-57, 
  /* [16][0][][] */ -37,68,127,-45,31,88,-5,-22,-1,19,-26,42,83,-5,93,124, 
  /* [17][0][][] */ 16,111,75,-127,26,-28,0,-81,-71,84,-33,64,-56,-29,110,-75, 
  /* [18][0][][] */ -66,12,-59,-87,127,93,-44,-51,47,87,108,74,10,93,-48,-26, 
  /* [19][0][][] */ 55,127,78,75,48,-22,-21,-4,-39,106,37,93,53,73,-59,26, 
  /* [20][0][][] */ 107,1,1,76,-75,-2,-36,60,-33,-68,-127,-39,74,-41,32,-11, 
  /* [21][0][][] */ -64,-51,-16,114,-23,4,-127,58,27,1,31,-2,-37,19,-72,13, 
  /* [22][0][][] */ -5,10,-76,-50,127,-11,-53,58,62,85,43,95,-16,13,5,39, 
  /* [23][0][][] */ -68,12,-18,14,1,41,75,67,1,127,-28,-25,2,26,-37,-15, 
  /* [24][0][][] */ 34,-82,46,-5,127,42,70,-45,62,27,42,37,-69,24,0,-28, 
  /* [25][0][][] */ 127,-44,73,19,1,-19,-46,90,95,-11,-52,14,117,-34,103,45, 
  /* [26][0][][] */ 62,51,117,117,54,0,-87,-51,5,76,-5,127,29,-78,39,-62, 
  /* [27][0][][] */ -47,49,-96,20,-47,111,7,-105,35,-68,113,7,23,-19,127,102, 
  /* [28][0][][] */ -36,42,-87,-127,36,-76,-3,-50,-110,101,-53,21,-27,44,-32,69, 
  /* [29][0][][] */ 99,108,-81,38,42,115,-41,-7,79,87,-14,37,-127,14,-40,78, 
  /* [30][0][][] */ -45,86,-122,-59,83,-38,31,19,-64,55,-52,-11,1,76,-23,127, 
  /* [31][0][][] */ 33,-119,102,40,73,-71,-91,46,-15,7,14,-46,-71,53,43,127, 
  /* [32][0][][] */ -48,64,-7,27,-96,55,13,70,24,-127,37,-82,25,47,28,62, 
  /* [33][0][][] */ -72,-3,73,97,3,22,-58,20,-43,-48,12,-24,-14,-2,0,127, 
  /* [34][0][][] */ -11,14,-84,-89,63,-4,-11,79,24,-8,3,-8,-41,-19,-34,127, 
  /* [35][0][][] */ 77,-1,20,-10,-7,22,-81,-22,-21,-127,-54,13,-10,-27,58,-24, 
  /* [36][0][][] */ -9,16,-127,-13,19,109,-10,30,-20,2,60,40,20,15,-63,60, 
  /* [37][0][][] */ 52,45,51,-53,54,-127,27,2,-115,67,-72,-8,12,30,99,32, 
  /* [38][0][][] */ -38,127,48,-54,35,28,73,-97,4,4,-127,47,-47,-106,-84,8, 
  /* [39][0][][] */ 88,45,-127,-107,-21,-29,10,-62,4,-13,10,-39,62,10,-112,-72, 
  /* [40][0][][] */ -48,12,-71,-83,-67,-24,27,-127,4,-2,12,-27,40,79,51,73, 
  /* [41][0][][] */ -29,-95,-18,127,1,-17,-78,-18,-10,-57,68,-70,-83,-6,10,22, 
  /* [42][0][][] */ -10,61,-28,-127,18,18,-3,-38,44,-13,-43,15,59,-15,-25,11, 
  /* [43][0][][] */ 6,69,-4,21,126,39,29,40,2,47,-3,-120,-127,-40,-29,-13, 
  /* [44][0][][] */ 98,4,31,55,-16,-1,-16,49,28,-27,22,-11,127,10,-63,-47, 
  /* [45][0][][] */ 16,-93,-61,49,-49,-84,10,54,28,-38,20,49,-68,127,59,-29, 
  /* [46][0][][] */ -9,-82,43,74,4,-5,-108,51,20,-56,52,-30,31,86,87,127, 
  /* [47][0][][] */ -37,-55,13,78,-1,-9,58,7,1,-63,-127,-41,35,-32,-57,17, 
  /* [48][0][][] */ -62,68,-18,-22,-5,45,-8,-127,27,-24,37,-40,42,-110,-43,5, 
  /* [49][0][][] */ -67,1,39,-41,3,1,127,119,-34,-30,-13,20,-49,38,-47,26, 
  /* [50][0][][] */ 66,25,-69,29,37,-127,-53,-5,-76,65,-59,5,15,-91,-119,-57, 
  /* [51][0][][] */ -60,54,-31,112,-33,48,-44,-64,-55,-88,9,-46,12,29,-17,127, 
  /* [52][0][][] */ -122,4,10,-11,22,31,54,-4,18,-82,-43,-44,-117,-63,-127,-11, 
  /* [53][0][][] */ -72,-86,-49,-113,-55,-14,17,93,59,-46,-33,32,-16,23,71,127, 
  /* [54][0][][] */ 6,-58,4,-1,-51,57,61,-12,-7,-92,62,35,-20,-23,-127,47, 
  /* [55][0][][] */ -23,-35,-37,36,63,-29,66,96,-60,-60,-127,-29,73,-29,-21,44, 
  /* [56][0][][] */ 82,-29,-52,-26,-123,32,-127,-9,-6,-10,-45,5,92,-37,49,4, 
  /* [57][0][][] */ -67,28,16,-27,127,45,60,57,-20,97,-2,-26,-72,83,-118,-40, 
  /* [58][0][][] */ 40,6,-1,-28,37,-14,-55,-66,58,-127,-77,0,-68,-67,-32,59, 
  /* [59][0][][] */ -54,-9,-5,12,15,59,-101,-55,68,127,-91,5,-20,4,-14,-1, 
  /* [60][0][][] */ 15,-68,2,21,-127,-43,45,1,0,52,-15,63,7,-43,57,48, 
  /* [61][0][][] */ 36,32,-59,-11,-27,2,-127,-71,-14,2,15,114,56,-73,107,33, 
  /* [62][0][][] */ 48,-22,57,-22,-15,30,38,96,-43,127,6,88,27,23,89,91, 
  /* [63][0][][] */ 24,-113,-16,-23,-67,17,41,-30,-5,-19,-1,-17,-35,127,95,33, 
  /* [64][0][][] */ -3,0,-127,-38,7,58,39,-40,10,-94,44,-2,57,-59,-60,120, 
  /* [65][0][][] */ 0,9,57,73,90,-3,66,96,-33,-19,-127,-80,22,111,-89,-17, 
  /* [66][0][][] */ -57,-127,-19,-88,-77,-112,56,-10,-9,-33,40,89,-56,-31,-63,101, 
  /* [67][0][][] */ -12,-77,-86,-13,-65,127,-20,-121,-68,-38,-37,-97,15,-28,-83,42, 
  /* [68][0][][] */ 121,40,5,-11,-94,3,-68,-54,-90,-127,-16,-15,41,-13,85,-66, 
  /* [69][0][][] */ 47,13,36,-19,-3,-51,-61,33,-26,127,-25,12,-9,42,76,-33, 
  /* [70][0][][] */ 38,-10,-25,79,-120,26,-15,-94,95,127,32,65,48,-48,-1,29, 
  /* [71][0][][] */ 123,-89,77,106,-86,-51,47,-28,127,6,-43,31,69,-76,18,25, 
  /* [72][0][][] */ -11,-49,40,112,57,-3,-127,95,86,-9,47,12,-46,-74,-75,92, 
  /* [73][0][][] */ 76,12,50,-107,52,-101,-82,40,0,127,-45,13,14,-99,34,-32, 
  /* [74][0][][] */ 73,8,32,45,-127,-25,45,2,-68,-42,20,-48,30,-60,-5,18, 
  /* [75][0][][] */ 78,127,-121,39,65,57,-12,-26,-19,-33,55,75,-106,65,62,107, 
  /* [76][0][][] */ -67,-38,14,-41,-41,-1,87,4,-59,21,94,58,-48,-127,-22,87, 
  /* [77][0][][] */ -66,127,-12,12,-55,-91,53,92,51,-74,-7,73,-32,51,-14,96, 
  /* [78][0][][] */ 115,60,-61,46,-58,63,-127,15,5,-9,-59,-9,28,-103,2,51, 
  /* [79][0][][] */ -79,-42,123,79,-28,-97,-47,-41,-23,24,31,16,-64,127,-44,81, 
  /* [80][0][][] */ 61,102,24,-127,-13,28,88,-41,14,7,-40,30,84,-55,-2,-1, 
  /* [81][0][][] */ 41,-55,5,-127,103,54,-11,122,119,36,-20,-53,-13,25,-97,-79, 
  /* [82][0][][] */ 77,44,87,-10,127,-102,33,48,10,119,-50,41,-7,-55,45,-105, 
  /* [83][0][][] */ -46,76,21,32,98,61,127,109,-11,41,-22,-50,-82,100,-56,-88, 
  /* [84][0][][] */ 14,-73,-6,86,13,-71,-88,45,-87,75,-66,-10,-127,64,-16,-71, 
  /* [85][0][][] */ -127,42,-25,-18,-4,-54,-8,-15,5,51,4,-83,-88,-93,-100,47, 
  /* [86][0][][] */ -7,82,88,117,26,-24,57,26,-16,3,-34,-86,31,89,-127,-65, 
  /* [87][0][][] */ -14,52,127,-24,-92,-24,19,13,38,-21,9,39,-54,23,0,-7, 
  /* [88][0][][] */ -35,-66,-104,16,46,47,17,17,-14,-70,-123,-111,127,-6,12,32, 
  /* [89][0][][] */ 27,27,12,-127,5,-63,-60,50,113,-18,30,-97,5,-32,46,-76, 
  /* [90][0][][] */ 8,83,25,13,-29,53,34,127,-14,-69,-18,117,50,11,-58,69, 
  /* [91][0][][] */ -47,-13,0,50,76,50,-28,-95,-25,27,-27,12,-77,-127,-53,-21, 
  /* [92][0][][] */ -42,58,4,-24,-127,-9,-64,47,-35,55,82,56,-11,-18,50,9, 
  /* [93][0][][] */ 127,48,119,35,-121,-68,2,16,-14,-52,-41,-68,17,-67,3,-15, 
  /* [94][0][][] */ -22,-127,26,-100,21,29,-27,2,77,-31,-6,51,4,54,-52,40, 
  /* [95][0][][] */ -53,-76,-28,-51,111,83,-45,37,87,54,-70,61,-43,127,-74,53, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0016983270179480314, 0.0015516710700467229, 0.0018258141353726387, 0.0024858748074620962, 0.0017961061093956232, 0.0013360225129872561, 0.0012340014800429344, 0.001826139516197145, 0.0025407834909856319, 0.0013183866394683719, 0.002672216622158885, 0.0015720716910436749, 0.0024865248706191778, 0.0023529576137661934, 0.0014654526021331549, 0.0019436069997027516, 0.0019825361669063568, 0.0012011538492515683, 0.0023410185240209103, 0.0025799449067562819, 0.0023871285375207663, 0.00099954579491168261, 0.0015373164787888527, 0.0026643401943147182, 0.0018151397816836834, 0.0020791369024664164, 0.00079587596701458097, 0.0023007160052657127, 0.0027028508484363556, 0.0018369585741311312, 0.0013068922562524676, 0.0023720033932477236, 0.00135563884396106, 0.0026139521505683661, 0.0025125402025878429, 0.0021264750976115465, 0.0025603489484637976, 0.0019228802993893623, 0.0019561070948839188, 0.0029514979105442762, 0.00275226472876966, 0.0022907543461769819, 0.0032465136609971523, 0.0026491652242839336, 0.0041202306747436523, 0.0020622715819627047, 0.0019605529960244894, 0.003030391177162528, 0.0026572272181510925, 0.0027337707579135895, 0.0020700264722108841, 0.0017670433735474944, 0.0022681299597024918, 0.003076962660998106, 0.0028788486961275339, 0.003027929225936532, 0.0025393147952854633, 0.001922511262819171, 0.0015224482631310821, 0.0026566686574369669, 0.0027734183240681887, 0.0017955657094717026, 0.0019620703533291817, 0.0026659588329493999, 0.0020533152855932713, 0.0016395078273490071, 0.0017041353275999427, 0.0024721552617847919, 0.0015517666470259428, 0.002746594836935401, 0.0016404041089117527, 0.0019099974306300282, 0.0019329043570905924, 0.0014753681607544422, 0.0026387416291981936, 0.0018239844357594848, 0.0028700763359665871, 0.0019613816402852535, 0.0022655902430415154, 0.0017652908572927117, 0.0019424854544922709, 0.0016038732137531042, 0.0010451823472976685, 0.0019116852199658751, 0.0021561365574598312, 0.0020482707768678665, 0.0023255320265889168, 0.0040185688994824886, 0.00086615118198096752, 0.00269872578792274, 0.002648516558110714, 0.0028126745019108057, 0.0011988854967057705, 0.0021864098962396383, 0.003008596133440733, 0.0023152832873165607, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 5471, 2970, 1127, -1410, 4820, 7326, 8222, 1902, -236, 7433, 782, -4007, 2564, 2734, 214, -684, 3547, 7757, -318, -48, 3094, 10724, 7020, -1169, -3787, -849, 14553, 108, 1093, 1925, 7633, -1345, 6920, 2238, 3307, -3362, 567, -4005, 260, 1239, 1876, 1133, 1221, -350, 746, 2025, 3644, 2409, 2828, 2154, 4171, 2854, -1996, 1198, 933, 1618, 1497, 2201, 6492, 962, -701, 4617, 3878, 2765, 3531, 5175, -4096, 2030, 4893, -677, 5234, 1212, 2627, 3735, 2634, 1537, -318, 2143, 2114, 3437, 2623, 3331, 9235, 848, 2097, 3836, 746, -689, 13837, -263, 739, -919, 8683, 2488, -45, -653, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00013913204020354897, 0.00012711755698546767, 0.00014957616804167628, 0.00020365032833069563, 0.00014714240387547761, 0.00010945097164949402, 0.00010109310096595436, 0.00014960282715037465, 0.00020814860181417316, 0.00010800619202200323, 0.00021891600044909865, 0.00012878882989753038, 0.00020370357378851622, 0.00019276134844403714, 0.00012005427561234683, 0.00015922611055430025, 0.00016241530829574913, 9.8402124422136694e-05, 0.00019178325601387769, 0.00021135683346074075, 0.00019556072948034853, 8.1885787949431688e-05, 0.00012594157306011766, 0.0002182707394240424, 0.00014870169979985803, 0.00017032913456205279, 6.5200547396671027e-05, 0.00018848155741579831, 0.00022142565285321325, 0.00015048915520310402, 0.00010706453758757561, 0.00019432163389865309, 0.0001110580051317811, 0.00021414279763121158, 0.0002058348327409476, 0.00017420721997041255, 0.00020975146617274731, 0.00015752812032587826, 0.00016025015793275088, 0.00024179556930903345, 0.00022547379194293171, 0.00018766547145787627, 0.00026596413226798177, 0.00021702756930608302, 0.00033754165633581579, 0.00016894747386686504, 0.00016061437781900167, 0.00024825872969813645, 0.00021768802253063768, 0.00022395870473701507, 0.00016958278138190508, 0.00014476149226538837, 0.00018581200856715441, 0.00025207400904037058, 0.00023584392329212278, 0.00024805704015307128, 0.00020802828657906502, 0.00015749789599794894, 0.00012472353409975767, 0.0002176422713091597, 0.00022720675042364746, 0.00014709813694935292, 0.00016073869483079761, 0.00021840335102751851, 0.00016821375174913555, 0.00013431340630631894, 0.00013960787327960134, 0.00020252638205420226, 0.00012712538591586053, 0.00022500929480884224, 0.00013438682071864605, 0.0001564727135701105, 0.00015834932855796069, 0.00012086658534826711, 0.000216173633816652, 0.0001494262833148241, 0.00023512526240665466, 0.00016068226250354201, 0.00018560394528321922, 0.0001446179230697453, 0.00015913422976154834, 0.00013139410293661058, 8.5624473285861313e-05, 0.00015661098586861044, 0.00017663717153482139, 0.00016780049190856516, 0.00019051456183660775, 0.0003292132169008255, 7.0957707066554576e-05, 0.00022108771372586489, 0.00021697442571166903, 0.00023042273824103177, 9.8216296464670449e-05, 0.00017911725444719195, 0.00024647320969961584, 0.00018967495998367667, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 19,106,6,-5,-19,8,40,35,50,-90,-62,52,-5,-35,16,-30,-92,19,22,19,39,55,86,85,12,-12,-43,10,-4,22,16,-20,-53,2,-40,98,-14,70,14,-11,33,-33,-10,49,-118,-72,6,-23,-26,-113,-38,-5,33,72,-21,-5,-68,-46,-60,-127,-127,4,-87,16,-35,60,38,-24,-38,35,31,-14,-24,4,43,-7,7,-30,-60,36,1,-79,67,-31,-113,-36,-2,34,-127,20,-80,36,65,-18,47,-11, -50,-42,4,70,-2,97,-20,-9,73,24,-127,74,-21,-72,-102,127,-113,52,49,84,108,4,120,127,21,11,7,43,13,92,-9,-127,76,77,4,50,64,127,-19,-127,127,-8,80,127,-44,-121,127,-74,-9,-119,-83,-23,35,127,-21,-127,13,35,-127,-77,-34,-127,-37,101,-37,84,117,-33,-8,127,127,-9,-67,13,-37,-112,28,-47,0,127,-7,-54,127,-69,-125,-24,66,69,74,114,-92,-1,127,-34,127,24, 9,-109,7,-2,-3,1,-25,38,16,58,-42,10,-5,7,-1,-53,-15,16,12,17,44,42,70,74,12,-38,30,54,13,26,-9,-62,-48,-82,-41,67,-11,-1,20,17,-3,32,-24,43,-67,-41,3,11,15,-92,6,3,9,8,3,1,54,-53,-22,-63,-105,11,-75,0,40,40,-39,-18,-38,-13,2,23,-19,-41,-21,-1,-2,-11,-47,10,0,-85,42,-9,-27,-23,7,-16,-93,-10,-25,37,17,30,23,-26, 
  /* [0][1][][] */ 89,-19,70,110,10,-50,127,40,-29,-127,-77,127,3,-127,-43,34,-56,-50,78,22,-127,-4,-127,-88,-12,62,-127,127,-80,67,127,70,19,59,6,127,-127,66,-11,-50,68,-127,19,67,-127,-77,-3,-109,-124,-127,-127,7,127,-35,88,-21,-127,10,-59,-20,-22,-73,-33,62,-113,-7,85,-100,-51,34,-55,-127,-119,54,127,-112,106,73,-76,-21,127,-127,-23,102,-90,1,21,126,-13,44,-63,25,-15,-96,72,-25, -127,9,-55,127,-77,-127,-124,-127,56,4,-21,38,-87,-85,-34,104,-127,-127,127,127,11,-127,-121,60,-127,127,9,66,-79,-21,-102,67,-127,76,127,-27,27,107,127,-95,-39,31,28,46,-17,-127,-85,-127,-4,-114,-92,127,35,76,67,-75,29,33,91,-26,30,-55,-127,127,-4,-127,127,127,20,55,-119,-71,-22,44,-114,-127,127,127,127,-34,-76,18,-98,61,-119,-69,127,127,109,127,-127,-127,-95,-58,68,127, 48,-9,103,50,12,-16,8,40,-44,112,-61,69,14,-20,-127,70,31,-36,20,8,-126,0,-77,-86,-7,22,97,12,127,85,17,-114,-35,-127,-24,126,-117,6,-30,-42,6,122,19,74,-37,-6,-11,-68,127,-127,-89,-20,58,-61,-127,20,113,9,-108,57,-4,-61,4,63,127,-22,-27,-7,-63,12,-47,-40,-127,-127,-20,-83,-20,-17,-88,-21,-78,-123,-15,127,-127,21,16,-4,-33,8,-9,45,-19,127,13,-24, 
  /* [0][2][][] */ 22,-127,26,-18,24,30,31,44,-30,-33,6,-42,17,-21,-3,36,-12,13,7,50,-24,46,6,-51,19,71,-8,0,-31,53,-1,34,-18,-23,-33,-9,30,20,14,-36,13,25,-20,-7,-19,-36,-23,-5,-15,31,-32,22,-2,21,-32,-9,-3,0,3,20,-43,-11,18,10,-45,48,-42,-28,26,7,8,79,-26,2,18,7,-48,-38,-25,13,4,4,-7,-42,-90,49,-13,-8,-94,75,26,22,-12,-5,9,-38, -58,6,127,-16,127,74,-18,16,-127,3,-73,-49,127,-15,-53,31,11,42,5,-16,2,16,59,-55,56,-57,-10,31,-26,127,-17,13,-72,29,8,-39,62,37,36,-120,-4,3,-127,30,-9,-18,-44,-74,-3,-57,-53,74,116,-41,-25,-77,-18,127,-26,2,74,-90,65,99,-42,22,-47,12,127,3,-7,101,-85,8,-19,-83,-10,-72,-24,-17,-20,-54,-32,-67,-68,127,61,-18,65,63,29,21,-27,-17,-10,-23, 3,88,11,-27,10,10,-10,43,10,71,16,3,11,-15,-8,24,-18,11,-2,51,-40,49,-9,-46,8,60,15,29,0,53,-17,-78,-33,-20,-32,-17,28,-22,10,-22,13,-8,-7,19,-24,-7,-26,-5,13,45,-26,3,-2,2,4,9,4,12,11,51,-51,-9,11,-8,30,15,-60,20,19,-4,14,68,8,-21,-4,11,-27,-12,-6,13,-17,-60,-2,-20,-77,40,-22,-44,-83,69,16,25,-17,-2,2,-43, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.013688502833247185, 0.0067830714397132397, 0.0052268914878368378, 0.0078369295224547386, 0.01164335198700428, 0.01259504072368145, 0.012404230423271656, 0.011578800156712532, 0.011104353703558445, 0.007425298448652029, 0.0054160584695637226, 0.018598342314362526, 0.012167301960289478, 0.0057236729189753532, 0.0051912502385675907, 0.0061389938928186893, 0.0052041779272258282, 0.011701393872499466, 0.0064503811299800873, 0.0042944462038576603, 0.0065562655217945576, 0.013904442079365253, 0.0091068996116518974, 0.010470866225659847, 0.035951431840658188, 0.0096224173903465271, 0.015087774023413658, 0.0055565363727509975, 0.0079605914652347565, 0.0035413214936852455, 0.016905060037970543, 0.0099102659150958061, 0.0071291187778115273, 0.0090840402990579605, 0.013100177049636841, 0.013879371806979179, 0.0080861616879701614, 0.014319582842290401, 0.012533978559076786, 0.0039826841093599796, 0.0071744918823242188, 0.0091071957722306252, 0.010804553516209126, 0.0045876270160079002, 0.0041699432767927647, 0.0034454278647899628, 0.0083808377385139465, 0.0053286119364202023, 0.0090163601562380791, 0.0033937953412532806, 0.0043781278654932976, 0.0058988346718251705, 0.0074517815373837948, 0.0068491026759147644, 0.0083824349567294121, 0.0061725829727947712, 0.0094056781381368637, 0.0092427637428045273, 0.0074026822112500668, 0.0059979567304253578, 0.0075537506490945816, 0.0063024144619703293, 0.0074245389550924301, 0.0039644581265747547, 0.0064892726950347424, 0.010956092737615108, 0.00772435637190938, 0.0079332757741212845, 0.0098449597135186195, 0.0091469110921025276, 0.012081422843039036, 0.0086769526824355125, 0.0042057647369801998, 0.012033580802381039, 0.012329808436334133, 0.0035918899811804295, 0.0062484731897711754, 0.010514035820960999, 0.010206654667854309, 0.010034999810159206, 0.012380992993712425, 0.0050705396570265293, 0.011581199243664742, 0.0093038054183125496, 0.002379697049036622, 0.010616589337587357, 0.0055111423134803772, 0.0074406447820365429, 0.010357419960200787, 0.0068273576907813549, 0.0039727878756821156, 0.018000019714236259, 0.011385282501578331, 0.012699108570814133, 0.0071114096790552139, 0.017329636961221695, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 1604, 625, -2444, -2822, -2637, 187, -817, -1272, -443, -1150, 7325, -1422, -1654, 12311, 8671, -4341, 13294, 2407, -5142, 165, 1838, -923, -363, -5, 433, -3899, 772, -4424, -299, -8852, -245, 244, 10250, 478, 656, -51, 780, -1478, -1673, 6554, -1675, -1128, 2003, -5621, 13043, 15524, 1121, 13978, -68, 13579, 12851, -2121, -1228, -3016, -558, 10486, -1353, -1816, 13914, 6900, 7028, 13644, 8487, -10129, 1612, -1400, -3197, 3117, -942, -1860, 2998, 1045, 12445, 1875, -96, 13488, -99, -318, 5422, -3225, 539, 14778, -2673, 1847, 21852, -1910, -4885, -3613, 5757, -7773, 12237, -80, -122, 1086, -4177, -1182, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00032208242919296026, 0.00015960168093442917, 0.00012298568617552519, 0.00018439834821037948, 0.00027396122459322214, 0.00029635391547344625, 0.00029186424217186868, 0.00027244235388934612, 0.00026127891032956541, 0.00017471291357651353, 0.00012743666593451053, 0.00043760807602666318, 0.00028628946165554225, 0.00013467465760186315, 0.00012214707385282964, 0.00014444692351389676, 0.00012245125253684819, 0.00027532692183740437, 0.00015177368186414242, 0.00010104579268954694, 0.00015426507161464542, 0.00032716334681026638, 0.00021427999308798462, 0.00024637332535348833, 0.00084591604536399245, 0.00022640982933808118, 0.00035500645753927529, 0.00013074203161522746, 0.00018730803276412189, 8.3325212472118437e-05, 0.00039776612538844347, 0.00023318272724281996, 0.00016774397226981819, 0.00021374212519731373, 0.00030823945417068899, 0.0003265734703745693, 0.00019026262452825904, 0.00033693137811496854, 0.00029491714667528868, 9.3710215878672898e-05, 0.00016881157353054732, 0.00021428696345537901, 0.0002542247821111232, 0.00010794416448334232, 9.8116317531093955e-05, 8.1068894360214472e-05, 0.00019719619012903422, 0.00012537911243271083, 0.00021214965090621263, 7.9854013165459037e-05, 0.00010301477595930919, 0.00013879610924050212, 0.00017533604113850743, 0.00016115535981953144, 0.00019723376317415386, 0.0001452372525818646, 0.00022131008154246956, 0.00021747680148109794, 0.00017418076458852738, 0.00014112840290181339, 0.00017773531726561487, 0.00014829210704192519, 0.00017469504382461309, 9.3281370936892927e-05, 0.00015268877905327827, 0.00025779040879569948, 0.00018174956494476646, 0.00018666531832423061, 0.00023164611775428057, 0.00021522144379559904, 0.00028426878270693123, 0.00020416360348463058, 9.8959171737078577e-05, 0.00028314307564869523, 0.00029011315200477839, 8.4515057096723467e-05, 0.00014702290354762226, 0.00024738907814025879, 0.00024015658709686249, 0.00023611764481756836, 0.00029131749761290848, 0.00011930681648664176, 0.00027249881532043219, 0.00021891307551413774, 5.5992873967625201e-05, 0.00024980210582725704, 0.00012967393558938056, 0.00017507400480099022, 0.00024370400933548808, 0.00016064371448010206, 9.3477363407146186e-05, 0.00042352988384664059, 0.00026788900140672922, 0.00029880256624892354, 0.00016732729272916913, 0.0004077561607118696, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -102,45,56,-17,-73,-5,-65,-3,-54,13,-14,-33,31,44,40,-35,20,-2,98,17,6,-56,127,71,42,21,4,27,-61,-116,-97,3,-42,-52,26,12,10,23,-9,25,-11,11,-79,9,-66,-25,-7,95,-18,13,-48,-20,-7,1,25,-48,-99,7,-14,72,57,26,-4,2,-25,-44,-49,22,-61,-60,9,-12,5,0,-72,-50,-48,11,-34,3,-53,68,83,-76,6,48,9,52,26,-16,-4,-26,-38,-33,-52,11, 
  /* [1][0][][] */ 35,25,43,-59,-79,-30,4,14,-25,15,40,-63,-5,-22,-64,-50,-20,7,-66,13,-9,-81,11,66,-15,-74,6,-33,66,-120,116,-71,39,28,-10,41,28,74,-22,-42,48,27,-3,-27,29,48,-127,-53,-69,-61,-6,-15,34,-41,-36,47,6,-18,-20,4,-1,50,-23,-88,-14,-31,-61,-7,12,-13,-78,-12,-33,-25,0,-78,14,28,45,-68,-23,-19,-85,-29,38,-57,-31,31,-83,-19,-47,36,42,55,-50,60, 
  /* [2][0][][] */ 85,-46,14,42,20,-73,51,-5,-4,-3,-6,-14,-73,-23,12,-18,-89,-57,-37,58,2,-54,-39,20,5,-71,0,-34,-27,62,-64,127,-51,126,-36,36,-4,-16,-11,-17,-114,83,78,33,-77,11,-32,-6,50,13,-41,-59,63,-25,-26,72,49,13,43,7,21,56,-23,5,76,25,-8,-10,26,52,-55,-8,43,52,76,41,28,-80,58,47,90,-21,-47,24,-67,49,40,67,17,16,-20,32,-58,59,-23,34, 
  /* [3][0][][] */ -2,-14,-29,23,23,0,-6,-67,-19,66,43,68,38,-6,-54,56,10,-39,32,24,14,127,33,-63,13,22,-32,-1,72,-26,65,-22,-14,33,-35,-14,20,54,42,5,-86,-33,-38,26,-53,36,19,6,-8,-42,-12,-30,50,-89,-30,-45,18,93,-33,10,5,-11,-38,-2,30,56,-38,5,-27,5,12,-75,-34,-47,47,-14,13,-7,-50,-37,-26,-9,-54,17,-16,-23,38,-32,8,21,29,-24,43,30,-42,54, 
  /* [4][0][][] */ 37,13,-47,30,25,30,-47,-1,-25,82,92,-15,-6,10,5,-43,19,-17,-26,59,15,-46,58,71,-70,3,-127,8,-38,-58,4,13,-59,-53,13,64,19,44,28,24,-40,-46,44,-18,-16,9,-34,57,-32,64,6,16,45,-18,-83,18,50,-9,5,-2,62,4,32,4,-48,23,-39,7,-54,32,-49,47,38,-63,-32,-51,23,-63,-19,7,-41,83,-73,0,-36,36,44,-60,56,12,22,8,-66,-19,31,33, 
  /* [5][0][][] */ -76,28,31,-4,51,-16,50,-28,-1,40,3,-22,47,-14,-26,-43,-11,-41,42,37,-121,-18,-81,27,-35,-1,36,-1,36,-71,-34,38,75,118,-18,54,0,21,58,-13,-48,88,82,-35,-9,77,43,-9,8,27,-35,21,17,-41,27,-102,50,-53,-78,-66,78,98,-44,-39,70,-39,-82,-63,-77,-18,-70,-5,-25,9,-20,-26,18,-51,-57,-21,127,-43,22,-87,-93,61,37,-21,-50,44,25,6,-26,41,10,85, 
  /* [6][0][][] */ 44,0,-96,6,-32,-119,115,112,-64,65,-24,76,-121,-97,61,52,-6,-59,-3,10,-3,-18,-85,-57,-62,46,83,38,30,35,108,-54,26,24,25,-77,6,-3,25,89,13,16,-61,-34,8,-69,-75,32,31,-124,-16,80,25,19,-18,-63,62,42,20,-8,-124,48,-108,6,29,-8,3,53,50,32,0,-40,-40,28,100,25,75,-20,50,-68,-10,-55,-82,76,2,-88,44,18,-54,57,35,50,-20,5,-23,127, 
  /* [7][0][][] */ 39,80,-59,-53,-28,-8,31,12,-57,34,-48,-60,-35,24,16,-5,-42,-53,-32,62,-9,127,15,18,-8,10,17,20,52,54,79,-31,73,28,-25,15,8,-4,8,30,-70,-5,17,-58,9,-43,68,-24,41,-74,-95,-35,-51,4,-4,-10,33,17,-115,10,4,117,26,-32,-28,7,-52,15,-47,-15,-112,40,14,64,-38,53,-63,53,3,-92,-16,-52,64,-84,40,-14,-7,3,-1,73,-85,45,51,-27,-45,6, 
  /* [8][0][][] */ -7,73,-56,60,-32,-26,-94,21,-95,-26,15,3,-34,50,33,100,12,-50,1,17,30,-3,13,-21,-34,73,-10,19,-15,-7,-55,-38,-15,-59,-35,-59,-34,25,58,1,-14,-42,30,21,-44,-31,-5,-13,-15,-8,41,66,13,-26,-71,90,-30,40,-9,-30,-28,14,28,46,-35,-53,-39,-7,-48,9,0,2,-25,-51,-107,-11,-51,21,-78,-50,-32,-5,-43,-36,-8,18,28,24,14,67,-56,-10,-95,-127,13,-56, 
  /* [9][0][][] */ -15,16,-59,45,-31,-29,71,42,-6,48,-24,91,-30,-21,23,127,8,15,71,13,19,14,41,-85,-26,0,30,-6,21,-14,44,51,-32,-1,0,-108,30,-7,-22,-23,-12,22,45,-21,-13,2,21,11,37,79,26,-4,-50,-75,0,-6,7,2,68,-12,-64,68,-59,-22,83,-12,-24,14,-64,25,34,25,-4,85,-31,-24,-30,23,-34,-11,50,-21,64,-2,32,-11,-3,-27,-44,20,-1,-8,64,38,-51,-2, 
  /* [10][0][][] */ 76,2,-45,-23,-41,-31,78,6,15,-29,-23,-15,-95,-21,2,-18,-76,-33,18,7,36,43,29,18,-37,89,47,-7,-62,-87,-36,-14,76,-37,50,11,75,-84,83,127,18,-64,5,-1,-14,-89,-3,58,26,83,-67,-45,-28,28,12,51,20,-66,77,46,-16,47,-68,-19,-12,-63,15,54,19,-29,-14,48,126,40,5,-85,28,-49,62,-5,-46,35,38,20,-37,-15,3,43,-43,-15,31,63,54,71,-34,8, 
  /* [11][0][][] */ -48,-45,29,-49,32,-12,-42,-39,41,-29,10,7,2,12,10,28,-49,2,49,26,-45,14,-61,-101,14,13,-50,29,29,-30,27,-36,23,-3,11,-5,-61,12,-101,19,-87,58,-49,70,-5,14,-20,-37,28,-20,-71,-54,31,17,89,-63,-25,-38,8,-38,-6,-40,-10,-127,2,-50,66,78,106,27,71,-22,-42,-30,75,-35,93,34,0,28,23,-11,-20,86,66,33,10,-19,-63,-61,-19,21,44,40,41,59, 
  /* [12][0][][] */ 39,-34,-20,-23,47,105,-17,45,49,73,3,65,21,58,9,7,-50,49,9,52,127,-3,61,-89,20,17,-82,-82,-22,93,-2,4,41,-8,4,-37,48,-20,-23,-26,5,-21,27,76,-27,40,-12,-20,-53,24,-4,15,-5,-24,22,8,-44,73,7,61,50,-80,28,-113,1,102,-7,-27,-5,-48,67,25,-14,-1,10,58,-6,52,-89,-24,-30,10,113,24,-12,79,-14,-82,74,12,-83,49,64,9,-7,-103, 
  /* [13][0][][] */ -13,43,0,-48,-31,-4,20,-37,21,-27,-37,-68,63,-116,-39,-84,-22,-31,-88,-20,-93,-33,25,113,-26,1,119,14,22,-47,63,53,7,5,-118,127,-39,-53,22,-53,127,22,-8,24,6,-100,64,-35,82,-20,-37,32,26,1,-2,69,75,-58,-36,-16,38,51,-9,-77,2,38,-34,39,-62,-29,-75,0,-60,19,-48,-94,-103,28,56,89,-19,70,41,-89,50,33,39,-8,-24,-19,-11,15,-52,22,-30,-4, 
  /* [14][0][][] */ -11,26,-63,-29,84,97,-79,-21,26,-47,85,-7,16,-36,-41,-71,-75,17,37,127,8,-19,5,15,6,38,-30,73,19,-16,-20,9,65,-10,-47,1,-24,68,78,8,70,9,44,2,2,-45,58,-39,22,-13,-12,-26,43,12,-44,37,13,59,-95,-21,-26,-71,-49,-98,22,-51,-54,-12,-75,62,-19,23,2,-24,-38,-38,37,-14,-49,-35,28,9,0,-18,-13,32,-15,-11,-50,74,78,16,3,-46,-49,-68, 
  /* [15][0][][] */ -78,-40,45,-93,8,-37,-16,-82,0,9,-5,63,-12,-35,25,84,-116,-19,16,-85,33,-27,-21,-66,48,-4,57,-49,-66,-120,-57,48,-37,62,92,-110,-17,-34,14,-19,-14,-1,31,-27,16,1,69,105,-57,-19,28,-53,-50,58,10,-57,-104,-30,121,6,-59,16,-99,38,-56,-29,9,6,63,-76,94,-23,62,-22,-39,-44,19,27,68,10,-21,83,50,32,6,-34,-127,20,-20,-50,-75,45,59,-40,-18,70, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0021222322247922421, 0.0029133076313883066, 0.0022828052751719952, 0.002759949304163456, 0.0029144941363483667, 0.0027401228435337543, 0.0020014678593724966, 0.002046091016381979, 0.0033919583074748516, 0.002921585226431489, 0.0023589234333485365, 0.0027621609624475241, 0.0038094883784651756, 0.0023419039789587259, 0.0029989120084792376, 0.002840627683326602, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 10079, 16388, -6159, 2094, -1551, 8262, 1239, 4648, 15270, -5416, -7140, 5861, -15520, 9500, 4486, 10564, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 4.9934875278268009e-05, 6.8548419221770018e-05, 5.3713065426563844e-05, 6.4939988078549504e-05, 6.857633707113564e-05, 6.447348278015852e-05, 4.7093362809391692e-05, 4.8143319872906432e-05, 7.9810786701273173e-05, 6.874318205518648e-05, 5.5504082411061972e-05, 6.4992025727406144e-05, 8.9635024778544903e-05, 5.5103624617913738e-05, 7.0562637120019644e-05, 6.6838299972005188e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ 1,113,-76,55,64,-21,90,87,-55,12,25,-100,104,127,-58,9, 
  /* [1][0][][] */ -25,-4,-59,-25,-13,38,27,-127,25,-49,-17,-46,-9,-47,-49,9, 
  /* [2][0][][] */ -19,-24,36,77,26,45,-109,127,-19,6,71,-60,-13,-63,-39,64, 
  /* [3][0][][] */ 90,-99,75,-11,-10,-38,-31,127,-30,61,76,50,-18,66,8,17, 
  /* [4][0][][] */ -44,-25,-12,40,-76,10,-25,-127,-4,-14,38,-9,23,45,106,115, 
  /* [5][0][][] */ 116,23,-23,-37,-78,21,30,70,14,-14,61,91,127,21,-80,8, 
  /* [6][0][][] */ 13,-40,-63,-60,-79,2,3,-54,-57,-58,-25,33,80,48,127,-4, 
  /* [7][0][][] */ -56,30,-32,-73,1,-59,-71,11,-94,51,-65,-63,-127,-35,13,90, 
  /* [8][0][][] */ 54,44,73,14,57,27,72,9,68,-29,39,5,-127,-26,-81,9, 
  /* [9][0][][] */ -41,71,36,-47,-27,-10,37,-3,-29,51,-43,18,60,127,27,29, 
  /* [10][0][][] */ 62,43,-42,31,-29,-18,51,-49,-66,-24,-45,-89,-127,-59,14,94, 
  /* [11][0][][] */ 56,10,69,13,-9,-27,7,117,-87,29,-36,-2,-17,1,74,127, 
  /* [12][0][][] */ -54,-25,8,1,21,-2,127,39,-73,20,12,-9,-3,77,-46,106, 
  /* [13][0][][] */ -2,16,25,41,123,28,127,80,-50,107,-84,-58,9,99,-122,-10, 
  /* [14][0][][] */ -127,123,5,-16,-6,1,70,-6,-47,29,127,-2,-105,19,-33,53, 
  /* [15][0][][] */ -12,-18,-127,-49,85,-44,-92,-35,-22,-22,-19,-68,-6,-88,-59,47, 
  /* [16][0][][] */ 118,-13,12,-9,34,-28,42,-17,-35,15,127,48,52,8,-38,17, 
  /* [17][0][][] */ 6,13,-34,-100,-20,-71,125,-127,-6,-28,-40,41,27,73,2,62, 
  /* [18][0][][] */ 24,116,-37,-75,47,-111,-25,-88,-48,127,-13,-19,-64,66,-21,-5, 
  /* [19][0][][] */ -72,-126,127,-77,46,-127,31,-41,45,39,95,115,32,-21,74,-36, 
  /* [20][0][][] */ -13,87,43,0,5,3,15,-29,57,-5,89,-30,-127,-15,-64,-6, 
  /* [21][0][][] */ -77,38,22,15,75,44,81,49,-127,66,-47,19,-35,27,-66,-19, 
  /* [22][0][][] */ 20,-87,50,15,23,-127,112,6,21,-53,-46,-75,38,-91,-54,-60, 
  /* [23][0][][] */ -58,-95,47,59,28,-20,27,-47,12,-38,84,7,1,67,73,127, 
  /* [24][0][][] */ -2,-4,21,84,44,16,-55,-127,59,17,-38,21,-2,6,-20,-22, 
  /* [25][0][][] */ -4,36,23,-55,-31,-10,5,-37,-21,61,-49,-22,37,127,25,6, 
  /* [26][0][][] */ -66,86,11,25,39,-93,-5,-32,22,27,9,78,15,-5,-93,127, 
  /* [27][0][][] */ -26,-127,-51,-1,-64,86,6,-62,13,-40,61,-24,27,-45,-98,-13, 
  /* [28][0][][] */ -34,3,48,88,34,13,-42,-127,-124,49,102,-8,88,7,-44,-33, 
  /* [29][0][][] */ -127,106,-23,-26,-28,22,-121,-77,-46,-39,0,1,13,-66,-108,61, 
  /* [30][0][][] */ 47,67,-47,73,-100,-88,-64,-14,-40,-9,8,-100,127,26,-9,85, 
  /* [31][0][][] */ 127,25,-71,-44,-75,16,111,33,-67,-23,77,59,29,18,-29,16, 
  /* [32][0][][] */ -23,-14,127,8,-15,74,63,22,-13,-7,-13,14,10,71,68,33, 
  /* [33][0][][] */ -10,19,-65,-77,-29,23,127,25,-1,-19,34,-58,84,113,-39,62, 
  /* [34][0][][] */ -107,-25,90,7,21,-55,117,-12,-127,42,45,-54,31,73,-50,-23, 
  /* [35][0][][] */ 6,26,-40,27,-60,127,-42,-4,-14,123,-7,85,-49,63,20,20, 
  /* [36][0][][] */ -7,-69,127,-47,-48,23,-44,-2,18,24,-51,75,1,-76,-33,43, 
  /* [37][0][][] */ 80,-10,65,-28,108,-89,-49,15,-70,127,-61,-11,-123,-37,115,-7, 
  /* [38][0][][] */ 60,55,24,-109,-2,-51,-117,71,-86,65,-117,-63,-59,-127,-112,60, 
  /* [39][0][][] */ -81,27,-68,-39,-87,-79,74,14,-127,-31,28,77,23,3,-4,68, 
  /* [40][0][][] */ 127,33,0,-105,-84,15,25,-55,-34,-23,-41,-96,-14,63,40,51, 
  /* [41][0][][] */ 99,-75,-63,-46,-5,-2,-65,-19,62,-21,1,-61,127,-68,60,-35, 
  /* [42][0][][] */ -19,-95,-48,127,3,-105,-109,11,3,7,11,59,-93,73,-63,2, 
  /* [43][0][][] */ -82,-49,-39,-117,-51,-2,-10,74,44,-127,-42,44,-20,-58,-32,84, 
  /* [44][0][][] */ -41,45,37,-54,-22,-16,36,119,112,-71,67,96,127,51,-12,5, 
  /* [45][0][][] */ 30,78,-84,95,127,-94,-45,-66,112,-57,74,-76,-46,17,-64,68, 
  /* [46][0][][] */ -15,-31,10,-7,101,-16,31,29,-11,120,-30,-127,52,72,-55,68, 
  /* [47][0][][] */ 78,-46,-31,-15,79,-19,-37,-61,-3,127,-27,42,0,-113,-84,14, 
  /* [48][0][][] */ 6,23,-16,-125,-10,-57,124,-127,3,-1,-35,55,48,61,2,44, 
  /* [49][0][][] */ -32,112,-78,30,36,-73,73,34,-32,26,48,-99,-57,85,127,-77, 
  /* [50][0][][] */ 10,39,-24,-1,-127,-2,-63,-60,51,67,32,26,-47,-35,0,37, 
  /* [51][0][][] */ 127,-42,-50,-15,-48,81,-92,-50,45,-19,-40,66,-43,-67,6,42, 
  /* [52][0][][] */ -12,-44,49,69,-35,-94,-127,-2,-37,-50,-41,-73,25,-58,16,70, 
  /* [53][0][][] */ 28,99,54,-127,7,108,86,-16,-10,-23,-8,-40,83,-105,5,52, 
  /* [54][0][][] */ 27,117,4,-20,-9,-94,-100,48,2,-25,-36,127,73,86,16,66, 
  /* [55][0][][] */ -40,-10,58,28,54,-29,105,95,-77,-2,13,6,127,56,1,-5, 
  /* [56][0][][] */ 127,16,4,17,-63,109,-48,-98,-33,56,-83,-4,-82,120,-18,55, 
  /* [57][0][][] */ -40,-37,-36,-20,-59,-90,50,-11,-127,-35,53,56,30,32,-5,31, 
  /* [58][0][][] */ 49,-49,60,26,6,-59,-20,10,27,-10,-127,-31,18,-30,-30,42, 
  /* [59][0][][] */ 76,11,-126,91,4,34,97,-34,-84,-56,38,-103,-127,-69,33,124, 
  /* [60][0][][] */ -2,29,-12,25,-15,-26,-23,5,-33,-72,61,124,-47,-127,-37,-6, 
  /* [61][0][][] */ -40,8,79,-116,-71,47,10,114,-8,-101,56,73,73,-15,9,127, 
  /* [62][0][][] */ 69,42,-19,-127,-24,-3,12,-44,-10,28,-35,35,23,-8,-85,-61, 
  /* [63][0][][] */ -3,-32,-5,-13,-78,-83,-58,3,-80,-14,-32,-28,127,12,57,-8, 
  /* [64][0][][] */ 26,-4,-8,61,-115,-51,-21,-93,61,127,42,7,58,-69,-46,118, 
  /* [65][0][][] */ -33,9,-25,-27,-87,83,24,-29,62,-116,102,-79,64,79,-127,70, 
  /* [66][0][][] */ -125,86,-98,-87,30,-41,-96,-72,-96,101,93,-1,-127,-53,32,66, 
  /* [67][0][][] */ 7,-30,-127,-115,72,83,6,-23,-24,-3,47,-24,34,43,21,48, 
  /* [68][0][][] */ 48,19,-16,-49,-67,35,21,34,-64,63,127,-11,-12,-46,-116,3, 
  /* [69][0][][] */ 74,-109,56,-45,17,-115,-29,127,-2,63,85,84,-21,72,-25,-2, 
  /* [70][0][][] */ 44,3,111,35,92,-24,127,9,27,18,-60,42,-70,59,-77,41, 
  /* [71][0][][] */ 6,31,91,-76,-127,-74,18,6,-21,-6,24,-103,-88,7,10,37, 
  /* [72][0][][] */ -68,-106,26,-127,76,-18,13,43,-77,10,-126,-13,66,118,-64,126, 
  /* [73][0][][] */ 13,16,51,-9,127,-79,-41,8,-28,87,-85,34,-85,-56,105,-23, 
  /* [74][0][][] */ -105,3,-127,-69,56,-39,-34,17,-83,9,-109,-34,-51,-47,-29,89, 
  /* [75][0][][] */ 95,-21,50,-40,23,9,-127,-20,-2,-92,63,0,10,-9,-5,-13, 
  /* [76][0][][] */ -5,-59,-44,102,36,90,110,-62,80,-127,73,117,38,-82,-66,52, 
  /* [77][0][][] */ -50,-44,116,-12,22,-39,-21,-127,4,12,45,96,41,45,8,9, 
  /* [78][0][][] */ -43,8,17,-36,2,-50,28,-3,28,-11,13,-99,-108,-61,-127,-54, 
  /* [79][0][][] */ -82,-60,-11,20,127,42,-25,32,32,29,-22,39,-31,-69,-51,-26, 
  /* [80][0][][] */ 9,-109,52,127,-29,-22,-109,86,-5,30,67,-4,-78,0,-18,64, 
  /* [81][0][][] */ 116,63,-22,84,-12,29,33,122,20,3,127,77,118,25,80,-13, 
  /* [82][0][][] */ -53,8,8,-42,30,-127,-113,-85,7,84,-46,-56,-40,116,-72,-22, 
  /* [83][0][][] */ 104,-18,84,-28,-32,-6,-127,3,26,-114,8,-53,0,-6,0,-28, 
  /* [84][0][][] */ 9,-77,-99,19,127,37,44,31,-115,20,-106,-20,47,-40,-72,21, 
  /* [85][0][][] */ 21,93,40,-43,102,8,40,-109,127,-30,32,-25,84,-71,12,-4, 
  /* [86][0][][] */ 119,-40,127,49,-1,-61,80,37,-71,-62,-94,-44,35,18,-71,12, 
  /* [87][0][][] */ -2,10,21,-76,74,-25,-47,17,38,-36,71,-38,-85,-127,0,20, 
  /* [88][0][][] */ -61,-36,24,-8,13,16,-53,-54,-12,13,-53,-127,-57,-24,-17,-6, 
  /* [89][0][][] */ -78,25,10,-69,10,5,-127,11,76,25,-80,-28,-21,-68,-39,-28, 
  /* [90][0][][] */ -6,-10,-26,-69,127,29,-58,49,47,58,22,-3,36,13,-56,-25, 
  /* [91][0][][] */ -48,-74,27,47,-38,-16,0,68,-55,-67,39,-29,11,50,17,127, 
  /* [92][0][][] */ -29,67,-8,-18,-28,48,-82,36,-32,-10,66,-5,-46,127,51,32, 
  /* [93][0][][] */ -24,52,-59,-70,40,50,-55,-11,36,41,81,38,-127,32,-28,83, 
  /* [94][0][][] */ 24,64,98,5,-127,-41,14,-14,21,-23,30,-16,-67,-28,14,-21, 
  /* [95][0][][] */ -9,25,46,13,127,-36,-112,57,24,35,-95,102,-29,11,125,-35, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0013777606654912233, 0.0030199689790606499, 0.002247456694021821, 0.0016444921493530273, 0.0018052380764856935, 0.0022803402971476316, 0.0017711627297103405, 0.0026444406248629093, 0.0023005637340247631, 0.0025120950303971767, 0.0024679300840944052, 0.0024294236209243536, 0.0015466378536075354, 0.0010716286487877369, 0.0019178813090547919, 0.0021170901600271463, 0.0029595610685646534, 0.0020356310997158289, 0.0022440881002694368, 0.0013585416600108147, 0.003098662942647934, 0.0020452688913792372, 0.00190669612493366, 0.002435669070109725, 0.0031945006921887398, 0.002139706164598465, 0.0020276932045817375, 0.0023663791362196207, 0.0018841311102733016, 0.0022069935221225023, 0.0015482781454920769, 0.0022272597998380661, 0.0025682474952191114, 0.00148503587115556, 0.001305280951783061, 0.0019192019244655967, 0.0023982792627066374, 0.0016012679552659392, 0.0018766754074022174, 0.0011799376225098968, 0.0026931273750960827, 0.0022806799970567226, 0.0015393949579447508, 0.0016907100798562169, 0.0027266545221209526, 0.0018405318260192871, 0.001811122871004045, 0.0021584716159850359, 0.0010578222572803497, 0.0018698852509260178, 0.0026386035606265068, 0.0016958441119641066, 0.0013822102919220924, 0.0016069236444309354, 0.001980943139642477, 0.0021084838081151247, 0.0020560582634061575, 0.0015302737010642886, 0.0030730657745152712, 0.0020178547129034996, 0.0021688917186111212, 0.0019813179969787598, 0.00407059071585536, 0.0018170806579291821, 0.0014431007439270616, 0.001591395353898406, 0.0020847225096076727, 0.0018875398673117161, 0.0020742006599903107, 0.0022121821530163288, 0.0020398490596562624, 0.001772961113601923, 0.0016015729634091258, 0.0017009075963869691, 0.0017885153647512197, 0.0013536065816879272, 0.0015846205642446876, 0.002404248109087348, 0.0021767450962215662, 0.0023095519281923771, 0.0010429966496303678, 0.0016717810649424791, 0.0017873889300972223, 0.0018550942186266184, 0.0021964733023196459, 0.0019112775335088372, 0.0027988881338387728, 0.0019808853976428509, 0.0026801193598657846, 0.0026081157848238945, 0.0021612250711768866, 0.0022505039814859629, 0.0021144601050764322, 0.0027155315037816763, 0.0031368171330541372, 0.0016985943075269461, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 977, -10, 2038, 3742, 2777, -1375, 2652, -680, -1240, -429, 2099, -1475, 2734, 4267, 1182, 1322, -421, -265, -979, 3508, 1180, -358, 1416, -409, -467, 2280, 994, 1213, 2963, 1499, 2587, 883, 858, 3388, 3987, 1906, -304, 2146, 1641, -3238, -154, 910, -21, 1161, -638, 359, -1064, 501, -5202, 1077, 764, -2327, 4155, -831, 1410, 845, 834, 1929, -396, -1155, 229, 992, 330, 2922, 3663, 2379, 1621, 3021, 2587, -462, 1930, 3171, 2281, -1493, 3229, 4709, 673, -1935, 394, 683, 6451, 1356, -341, -1777, 774, 681, 792, -1606, 1903, 180, 2323, 695, 87, -1104, -119, 1224, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00017369547276757658, 0.00038073008181527257, 0.00028333879890851676, 0.00020732253324240446, 0.00022758790873922408, 0.00028748446493409574, 0.00022329200874082744, 0.00033338690991513431, 0.00029003404779359698, 0.00031670197495259345, 0.00031113406294025481, 0.00030627951491624117, 0.00019498595793265849, 0.00013510114513337612, 0.00024178893363568932, 0.00026690337108448148, 0.00037311439518816769, 0.00025663376436568797, 0.00028291411581449211, 0.00017127250612247735, 0.00039065108285285532, 0.00025784879107959569, 0.00024037880939431489, 0.00030706688994541764, 0.00040273345075547695, 0.00026975458604283631, 0.00025563302915543318, 0.00029833143344148993, 0.00023753402638249099, 0.00027823756681755185, 0.00019519275519996881, 0.00028079256298951805, 0.0003237811615690589, 0.00018721974629443139, 0.00016455788863822818, 0.00024195543664973229, 0.00030235311714932323, 0.00020187321933917701, 0.00023659407452214509, 0.00014875574561301619, 0.00033952487865462899, 0.0002875272766686976, 0.0001940728398039937, 0.00021314926561899483, 0.00034375168615952134, 0.00023203741875477135, 0.0002283298090333119, 0.00027212037821300328, 0.00013336056144908071, 0.00023573802900500596, 0.0003326510195620358, 0.00021379652025643736, 0.00017425643454771489, 0.00020258623408153653, 0.00024973921244964004, 0.00026581835118122399, 0.00025920901680365205, 0.0001929229183588177, 0.00038742405013181269, 0.0002543926821090281, 0.00027343403780832887, 0.00024978644796647131, 0.00051318283658474684, 0.00022908092068973929, 0.00018193294818047434, 0.00020062857947777957, 0.0002628227521199733, 0.00023796377354301512, 0.00026149625773541629, 0.0002788917045108974, 0.00025716552045196295, 0.0002235187275800854, 0.00020191168005112559, 0.00021443488367367536, 0.00022547967091668397, 0.00017065033898688853, 0.0001997744693653658, 0.00030310562578961253, 0.00027442412101663649, 0.00029116720543242991, 0.00013149148435331881, 0.0002107628679368645, 0.00022533765877597034, 0.00023387331748381257, 0.00027691127615980804, 0.00024095638946164399, 0.0003528582165017724, 0.0002497319073881954, 0.00033788493601605296, 0.00032880739308893681, 0.00027246749959886074, 0.00028372296947054565, 0.00026657179114408791, 0.00034234937629662454, 0.00039546121843159199, 0.00021414323418866843, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 26,65,25,-80,-68,32,7,72,-57,-24,-118,-70,-95,103,-44,70,49,108,3,9,-54,-103,-44,37,65,-104,15,119,59,-73,80,14,-60,106,37,-65,-26,-16,-103,-6,-104,-62,113,-54,100,-18,-93,97,-103,83,-88,-2,-23,126,15,74,-106,-76,0,38,-7,116,16,-119,82,-109,-99,68,63,-85,-22,127,-42,15,-37,107,-37,-83,-40,-32,-113,58,84,6,-40,-89,-57,-73,21,9,11,75,-104,-93,-57,19, 
  /* [1][0][][] */ 94,1,85,56,14,-11,21,52,44,72,-68,41,-86,-14,-1,-51,-36,-53,-12,4,76,81,-31,-74,62,27,-37,-44,94,32,-5,-42,-22,-44,-52,-36,35,-23,-17,-23,-8,124,-15,16,61,5,-12,51,-27,-69,-5,-26,7,-21,-15,-12,35,14,90,-22,40,-51,31,4,90,1,-23,83,61,67,75,74,-1,34,36,61,60,-50,85,30,-42,127,-65,73,70,75,-33,37,-13,16,99,-35,-27,-13,23,66, 
  /* [2][0][][] */ -19,-56,-86,-115,-34,13,76,7,23,-67,-57,-43,55,54,-63,-103,-83,42,-76,41,-112,-57,38,33,-83,47,-34,-37,-14,-25,-80,37,43,-69,56,-14,-66,8,-75,76,36,-38,113,82,-58,-23,33,33,-3,-78,4,77,-77,-87,2,-69,-62,32,83,116,106,88,-103,104,112,90,-64,-78,6,24,50,-18,36,-3,-9,-63,101,127,-92,-70,-79,91,57,35,-68,34,44,38,48,60,63,117,-65,-67,79,68, 
  /* [3][0][][] */ -74,83,51,-64,90,89,69,66,54,3,39,-40,91,5,94,97,-88,67,-74,92,-76,58,-55,13,75,41,-72,23,51,38,-31,95,-77,27,29,-88,-65,-64,-63,-36,-89,-39,-44,28,-50,-81,-41,-19,-36,59,-22,-90,17,44,85,-46,-96,-73,60,-66,-57,35,-102,-18,17,77,-36,-24,-24,-28,57,10,76,39,-35,-55,-87,-32,70,-44,54,67,-79,-66,65,-95,83,-63,-66,-127,44,86,-80,-68,30,-63, 
  /* [4][0][][] */ -89,17,87,-1,67,2,-23,-41,12,74,-98,-58,-72,96,23,-102,72,41,-26,-79,-89,67,-115,-32,-16,-104,87,36,13,-116,124,28,-101,48,-54,-46,85,-12,-97,-108,115,105,-92,-113,-23,92,-35,-37,101,-21,121,113,95,-113,-1,34,-100,-23,115,-59,71,-38,-9,87,-45,30,-114,-77,25,99,34,2,-62,-5,19,-62,-40,71,-40,55,42,-112,71,11,41,127,22,-56,-7,17,96,62,99,-21,-93,-111, 
  /* [5][0][][] */ -100,112,-48,-54,33,-23,-42,69,-30,-89,60,43,-72,10,113,108,-106,123,110,-4,107,3,-46,112,-127,43,-29,-55,-26,40,66,3,-65,71,70,57,109,-70,-61,-34,79,-20,-8,-49,109,117,8,-8,30,94,100,47,-79,-37,46,-33,102,-38,-63,77,62,73,-49,67,76,-52,54,53,98,-59,32,10,-95,79,24,-90,-48,65,33,-2,78,89,-80,-53,50,-58,-90,-11,74,42,-63,116,-18,115,6,64, 
  /* [6][0][][] */ 100,-37,-8,-111,-127,-43,43,-117,21,66,16,105,39,-79,-39,105,-87,83,28,79,-121,108,78,17,-74,29,-127,-123,-61,-111,-12,37,-108,2,59,68,-127,-62,-5,46,-109,31,65,-14,-123,71,-115,-43,49,99,-20,-34,-96,-117,-80,-102,-86,-23,-19,73,43,-65,92,-3,113,76,-38,38,-15,-102,-63,-36,50,-60,81,99,-58,37,-64,-95,12,-27,-54,-112,66,-11,-23,113,-24,-59,-105,-51,-91,-6,91,-107, 
  /* [7][0][][] */ 79,61,16,-58,101,-14,-4,-22,50,-57,11,-42,-17,109,88,66,65,1,-38,80,66,-51,37,-17,108,-38,64,103,-32,2,12,18,-76,-22,76,6,113,4,20,-56,-85,64,-10,72,-6,-35,-45,-13,66,-28,3,97,6,5,56,24,61,-70,33,-60,43,-47,-30,-9,30,-27,-60,-71,46,-54,-62,24,-64,52,0,74,-31,6,-35,30,-40,53,9,84,-31,-14,11,-36,53,127,122,-38,46,-53,84,-59, 
  /* [8][0][][] */ -63,-60,-113,-17,43,-12,-34,-115,98,-123,104,-112,-35,-94,-127,-9,12,67,56,-74,84,57,91,-65,-82,-118,6,-103,-89,-90,-113,-14,-50,-13,-97,98,-118,-113,-61,-79,-36,18,28,-27,-14,-66,-30,89,57,68,-49,-36,99,71,-25,-101,-19,-13,-24,6,-101,-22,-90,82,-30,-47,-8,-73,-85,26,-102,40,34,71,111,76,87,-12,3,16,25,90,-24,49,67,9,-31,78,48,116,-20,61,-119,94,97,-50, 
  /* [9][0][][] */ -26,-27,26,81,43,69,93,56,14,61,85,74,121,52,-14,-12,-2,-47,-35,-76,-66,87,26,-10,-83,-50,-31,61,69,-104,-20,61,-82,-53,123,-17,-24,6,-55,-55,127,79,15,20,60,74,41,-17,-22,-37,-86,-56,-98,54,33,82,10,-63,21,22,4,-54,19,84,-113,90,90,79,112,-61,-102,33,65,32,81,-111,120,-84,25,-42,-103,-50,112,-88,67,-97,-85,23,-53,40,22,24,-72,56,48,31, 
  /* [10][0][][] */ -72,41,-72,-86,-39,83,-114,-83,82,-75,86,62,-6,39,72,-6,96,11,-36,28,24,-51,-46,75,36,120,-32,-30,-107,-73,-7,-103,65,42,98,-90,102,-57,51,100,108,26,33,51,-13,41,14,-8,-86,127,97,116,91,-76,93,49,40,-14,71,-9,61,56,113,48,-36,102,5,61,8,-17,81,32,-87,-82,25,49,60,77,75,3,0,37,37,21,16,56,-81,23,16,13,-49,82,64,102,33,-21, 
  /* [11][0][][] */ 69,69,-75,-86,97,-7,-39,-81,-92,27,50,-2,31,-107,61,-73,-106,82,-30,-43,-52,-43,75,-70,-100,74,78,93,10,52,2,46,58,85,-111,-88,22,106,-56,-64,32,-127,115,-99,94,30,-113,-14,59,64,-63,79,67,-70,-45,-89,-43,89,-96,84,-26,13,75,-51,69,-26,103,1,95,104,-55,26,-82,-37,28,-101,-2,86,-73,-2,-87,-44,-117,91,6,-87,-43,-19,-100,-23,-66,-47,73,33,119,-19, 
  /* [12][0][][] */ -79,-42,-102,92,-3,-56,-66,-99,-27,-3,-57,21,-73,-96,-55,50,17,-44,9,98,-114,-54,56,36,-40,77,-102,-5,83,-91,64,59,19,-39,-9,-91,-19,-109,56,58,67,70,19,-80,22,-39,-63,67,-84,79,-66,27,-69,-110,65,35,-20,-88,-94,-105,22,-37,92,-30,-81,-10,-17,-74,-118,-126,12,-31,-111,-94,-24,-40,-127,-44,58,-77,5,56,83,-40,50,-93,-23,-85,-78,-108,-26,-4,-120,-105,-122,56, 
  /* [13][0][][] */ 50,39,68,-68,95,4,30,-52,22,-103,37,23,-13,81,36,67,69,46,22,75,114,-12,-13,-75,86,-68,-4,-78,23,-100,-58,-20,-24,-110,22,4,61,-87,67,34,6,-73,68,81,44,-12,67,60,-93,82,-51,6,-38,-113,-8,76,47,-59,71,-64,-109,-16,67,-58,-92,25,-30,-109,-98,-67,-91,85,-43,-8,99,-31,-38,83,-17,-53,71,24,10,101,93,-59,-114,67,-40,-67,28,-38,70,127,-26,-76, 
  /* [14][0][][] */ -63,-81,66,36,32,-102,-5,-31,-18,47,-51,-86,-17,90,-42,16,-107,-44,-39,-113,-23,21,-66,-58,-61,-44,52,2,52,-100,54,-61,-57,74,96,5,13,52,-106,-106,81,93,90,5,61,-89,-21,-62,-116,-11,-50,-84,-36,-127,65,-122,6,-108,-57,-113,-106,-115,0,-8,-26,40,-12,-31,-122,-28,17,-81,-120,-88,31,-35,-101,-27,51,-9,96,-52,89,14,-92,-75,-79,63,31,-24,-86,-50,-39,-114,-91,-75, 
  /* [15][0][][] */ 18,45,-10,-75,-106,89,3,50,-119,-50,99,-49,-22,-62,-53,-46,-40,87,-110,10,-32,-95,-66,-35,-10,-15,95,104,-24,-89,-127,19,53,98,-50,-31,-36,99,-41,-101,-70,111,102,-69,79,48,-86,-98,22,-38,-42,-99,-88,-10,26,7,46,-22,87,-58,-118,-103,-107,-69,-55,24,-23,-86,-25,-82,-93,6,61,42,-8,78,-39,97,-114,-32,-34,-75,-54,-62,-58,-44,97,-38,55,-106,-91,94,-10,-51,107,-84, 
  /* [16][0][][] */ -4,28,-83,104,84,-49,92,105,-35,44,83,-49,-34,65,-90,-17,37,79,-28,-17,-88,-17,-82,22,88,-51,-56,28,-39,93,102,37,-61,-31,23,17,-4,80,-93,64,51,19,77,-37,-70,-2,-78,-46,-13,38,91,64,-26,-87,54,12,44,90,-29,-43,42,-11,-26,60,-1,36,72,-29,8,-43,67,25,76,2,51,-69,78,-42,-76,-39,-17,13,9,-91,85,-74,4,-89,102,-127,66,-81,47,43,73,-105, 
  /* [17][0][][] */ -8,55,-81,-29,-26,18,-36,64,16,-7,61,-19,-30,107,16,-48,11,47,39,40,13,1,-44,-17,-25,31,-30,-59,-32,24,39,-74,38,-30,-26,44,18,-20,-22,22,-20,76,-24,-61,66,10,-18,-66,16,-23,-13,-80,-56,4,24,13,6,49,-45,-48,61,59,94,50,-43,18,-68,44,-52,-50,10,-20,-30,-5,-9,25,-83,-45,69,-70,-47,1,94,-39,49,28,-36,61,67,127,16,36,-60,12,44,34, 
  /* [18][0][][] */ 84,-118,-119,-17,53,20,-122,-108,-47,50,-91,-85,-8,110,27,31,19,86,-68,-48,-73,67,19,31,26,-20,33,-114,-15,-125,30,-117,-32,88,116,-57,26,-41,-60,-88,-109,20,111,-71,-27,44,101,-64,85,30,-58,-100,-56,-3,-41,36,78,22,-127,60,-106,-32,84,109,-21,24,-97,-110,110,-40,-76,88,-109,110,-7,118,22,87,-9,-28,-67,-37,-100,97,8,-64,98,13,73,34,-27,115,-81,-6,-5,-106, 
  /* [19][0][][] */ 51,63,-106,74,102,73,-60,-6,91,-60,-3,-42,65,70,107,-46,41,-95,-74,120,-121,-86,35,120,61,-32,32,-24,84,40,101,-111,61,-34,-86,66,-99,-44,-79,25,36,38,43,50,-39,29,-123,104,127,12,70,-41,65,-102,76,109,35,13,-96,-48,-30,65,86,-39,93,-16,-81,77,106,-5,-107,0,9,64,14,97,13,100,-81,117,-108,-55,75,-93,38,28,86,-76,-103,9,-24,13,-40,-78,68,-105, 
  /* [20][0][][] */ 1,-74,-17,61,96,31,81,61,-61,-48,33,13,-12,-82,15,-72,-11,-37,127,39,74,-102,84,-12,-95,111,-61,22,7,-56,-33,14,48,102,81,-43,96,24,-79,26,107,-106,-66,-10,59,31,-25,-39,73,-1,116,-60,11,106,32,-73,-36,-94,73,28,-30,92,55,74,40,100,44,-55,41,76,-61,36,-71,-74,-21,102,-2,-99,47,-68,24,85,101,-46,53,-10,-62,-103,120,-26,-116,-62,68,-22,40,45, 
  /* [21][0][][] */ 38,102,64,-95,-21,-48,-75,-16,-57,60,27,-61,-37,-90,-73,-69,-9,-5,-80,-68,-61,18,106,-26,75,-1,86,-8,-55,-77,80,6,-92,13,86,69,-71,-90,-96,38,-21,23,-25,27,-58,85,-124,79,79,-127,-1,-81,59,-47,-106,-50,-49,-45,83,89,34,-19,-27,52,-26,32,-36,-16,-9,-34,-30,6,-22,-98,-33,-20,-56,119,98,70,-41,70,-16,-42,-99,-59,8,37,-73,5,-84,82,-52,-79,83,-52, 
  /* [22][0][][] */ 5,-30,85,14,-40,-75,103,15,21,14,-24,-12,-30,53,-29,-41,-82,-13,-76,91,29,83,39,41,-12,62,-44,57,7,-27,-5,-56,-33,96,46,56,40,-40,7,-70,-23,56,-37,17,44,-34,86,-7,-72,-1,-42,49,-5,95,30,49,76,69,-21,24,-32,-15,55,60,92,-49,-77,0,56,72,-33,-7,25,69,-32,47,-63,-39,58,16,104,-28,-51,5,44,116,28,117,55,127,115,15,-67,23,66,98, 
  /* [23][0][][] */ -38,6,-2,-31,-59,-7,43,30,12,-75,56,-71,-77,47,58,-26,18,40,55,9,52,61,34,7,31,-39,-42,-47,-79,60,-1,81,53,-48,72,-13,-9,79,58,-56,95,14,84,-66,-81,11,-69,69,19,69,-24,-8,-61,67,47,-10,32,6,35,-1,-36,38,33,-89,84,-70,23,-8,69,77,-62,92,77,31,23,-40,-93,-1,-66,-19,-76,-6,-52,-64,-49,-127,70,-95,-22,-94,-46,-49,9,-16,-40,65, 
  /* [24][0][][] */ -2,69,93,84,47,-22,-92,80,26,-84,-73,68,13,23,-13,-54,-24,27,-44,66,104,-19,-21,22,3,54,-61,-52,71,90,78,-27,91,-42,-14,-19,10,-24,-65,-78,3,105,-70,32,-44,63,39,-36,-83,-36,20,-16,-51,62,93,-41,58,-43,-14,-28,84,28,92,-18,-99,-10,-59,89,53,-70,-1,21,-8,-76,-16,-29,16,-51,-24,61,52,-26,45,-34,-65,-22,-15,-53,-60,125,-9,-27,-56,-60,55,127, 
  /* [25][0][][] */ -15,-2,-9,80,14,19,-91,67,-11,81,80,64,-82,78,101,-90,-60,-6,-54,-8,95,106,-57,99,48,-61,-53,-62,60,72,-87,63,-79,-56,87,127,-125,76,-79,96,-66,91,77,8,18,-65,-92,-111,-60,33,-66,-37,-14,30,-105,-103,58,-33,106,33,-94,105,-108,11,-69,-79,-75,105,20,0,40,76,23,84,-15,-10,19,-42,31,-85,-74,-14,-32,41,94,-2,-29,34,-75,65,-61,-7,-3,111,125,51, 
  /* [26][0][][] */ 73,-91,-4,-11,75,-111,93,-55,55,-39,-102,-6,-51,-60,25,-32,96,-1,-102,-85,37,-53,63,82,-4,-40,37,38,17,-17,-59,-51,-34,40,36,110,-8,83,-127,97,83,13,-40,-110,-18,44,112,8,8,51,79,-27,92,88,55,25,82,-7,-70,-28,8,107,-54,-123,43,-38,-122,-40,-9,-58,28,30,-122,-77,-96,-80,-28,14,-27,54,100,29,-64,-24,-20,-26,-18,-93,19,64,102,100,-55,42,30,-22, 
  /* [27][0][][] */ 54,35,-120,106,-42,-22,-5,-20,-98,80,-43,-19,-125,69,67,-60,34,-127,-29,-120,-36,46,80,-102,-122,61,-53,45,80,-72,54,-124,100,-95,25,94,101,43,-85,-52,20,48,-38,53,66,-100,95,-78,-31,-75,50,84,101,63,-126,-92,81,-43,-34,-2,26,-85,-111,-103,21,105,10,-107,31,-18,24,-118,11,-87,-11,-93,-91,-13,66,8,-71,-77,75,-5,-116,-61,53,-36,99,36,44,97,79,19,53,-109, 
  /* [28][0][][] */ -110,121,-46,82,21,99,-101,9,51,-57,-88,89,74,-82,33,-94,-66,85,65,96,114,77,12,-77,65,-56,87,118,-51,28,-14,44,-14,27,-29,-47,43,104,-30,124,-75,-45,4,73,121,118,-7,7,115,7,-103,12,65,-23,30,68,108,53,51,96,47,-20,-18,-114,-70,2,103,-36,-79,64,72,123,-99,62,127,28,67,-48,-6,82,-63,55,80,-34,59,-14,-75,-61,-80,-29,68,-78,59,81,-3,84, 
  /* [29][0][][] */ 11,-19,30,23,-23,8,24,-103,-74,-37,-44,-69,66,-38,-67,-21,87,88,-85,96,10,-57,-71,-74,68,-70,-83,-39,-36,82,-57,28,-82,106,102,-12,-17,-112,9,-21,83,-55,-14,37,-68,48,-124,8,-27,44,18,24,-69,-7,78,88,17,-12,-52,11,111,99,-90,38,73,-74,-100,36,66,-4,-36,-43,-21,-127,-19,-83,-48,36,2,63,1,-50,12,-30,23,-104,-61,84,-39,-2,-88,-47,-101,-32,-62,-84, 
  /* [30][0][][] */ -72,-102,-74,-49,54,92,49,-20,-75,35,16,58,86,71,-119,-121,88,98,64,1,-16,-75,119,-89,26,58,-40,6,83,-54,7,39,1,-35,22,26,-95,-31,93,-37,-18,-79,-83,-100,72,115,-41,-28,-82,115,-107,-47,-117,-25,96,-102,96,42,0,-19,-65,-117,77,84,108,94,10,62,89,84,116,-91,22,-113,-98,33,48,-39,-3,-40,46,68,89,50,81,-24,70,41,111,109,74,-127,11,67,-88,-33, 
  /* [31][0][][] */ 26,116,73,-30,-58,-1,101,-80,-78,-62,61,-52,-72,-84,91,26,2,54,-50,40,-41,-40,101,14,68,72,-31,-50,-9,83,56,71,73,31,61,88,56,104,-11,-69,-25,107,-84,42,33,88,32,3,-95,-29,-54,52,33,-83,-8,3,-5,40,37,113,9,-111,102,-91,28,-85,76,-65,-101,40,102,-26,73,-67,-30,67,4,93,57,-69,4,-12,-125,-62,-28,95,119,-89,-82,127,39,-16,-57,-66,-100,82, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0017574331723153591, 0.0026013872120529413, 0.0018644895171746612, 0.0022847258951514959, 0.0018073355313390493, 0.0018921879818663001, 0.0017576470272615552, 0.0024911353830248117, 0.0018474232638254762, 0.0017531634075567126, 0.0019094712333753705, 0.0017806569812819362, 0.0019829294178634882, 0.0019570889417082071, 0.0018441976280882955, 0.0018157789018005133, 0.0021156999282538891, 0.0027085135225206614, 0.0017564243171364069, 0.0017653375398367643, 0.0020561644341796637, 0.0021304760593920946, 0.0029677113052457571, 0.0024724889080971479, 0.0022254507057368755, 0.001869064406491816, 0.0018029850907623768, 0.0018220354104414582, 0.0018350412137806416, 0.002022183733060956, 0.0017912968760356307, 0.0018604638753458858, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 203, 1641, -127, 38, 554, 90, -345, 1115, -383, 321, 171, 95, -501, -157, -798, -337, 170, -100, -61, -251, 302, -812, 2131, -55, -35, 493, -364, -437, 286, 121, 183, 65, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.1351369873154908e-05, 6.1209109844639897e-05, 4.3870342778973281e-05, 5.3758256399305537e-05, 4.2525542085058987e-05, 4.4522072130348533e-05, 4.1356401197845116e-05, 5.861495083081536e-05, 4.3468782678246498e-05, 4.1250903450418264e-05, 4.4928736315341666e-05, 4.1897812479874119e-05, 4.6657161874463782e-05, 4.6049153752392158e-05, 4.3392887164372951e-05, 4.2724212107714266e-05, 4.9781174311647192e-05, 6.372973439283669e-05, 4.1327632061438635e-05, 4.1537354263709858e-05, 4.8380341468146071e-05, 5.0128848670283332e-05, 6.9828500272706151e-05, 5.8176210586680099e-05, 5.2363546274136752e-05, 4.3977986933896318e-05, 4.2423180275363848e-05, 4.2871422920143232e-05, 4.3177442421438172e-05, 4.7580793761881068e-05, 4.2148163629462942e-05, 4.3775620724773034e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -43,127,-53,0,85,-54,-64,-31,63,-12,-25,-79,72,49,-23,-11,-42,8,-44,33,21,-80,108,-35,21,21,55,-5,7,33,-11,81, 
  /* [1][0][][] */ 100,-96,-76,10,11,53,-99,-114,-59,127,91,20,94,81,5,-56,111,11,-93,-85,122,-1,-18,58,-78,75,-15,-23,76,25,-70,-31, 
  /* [2][0][][] */ -23,-127,101,90,-7,64,-91,27,-36,23,-90,84,2,-66,81,38,80,-73,-84,83,2,19,-22,26,-99,-56,-4,-31,22,76,-67,50, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.0048943506553769112, 0.0032925661653280258, 0.0037289799656718969, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 19559, -33897, -27804, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.0002580509171821177, 0.00017359804769512266, 0.0001966076233657077, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.1139511838555336, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,81,81,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.077044032514095306, } };
const TfArray<1, int> quant50_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.075111106038093567, } };
const TfArray<1, int> quant53_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.092576511204242706, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,41,41,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.062864646315574646, } };
const TfArray<1, int> quant58_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023329455405473709, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.063425876200199127, } };
const TfArray<1, int> quant61_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.081923000514507294, } };
const TfArray<1, int> quant62_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.063958153128623962, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.12607085704803467, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,20,20,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.052724238485097885, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,20,20,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.092385672032833099, } };
const TfArray<1, int> quant69_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,20,20,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension46, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension47, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension51, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension53, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension55, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension57, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 99888, (TfLiteIntArray*)&tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension61, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension62, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension63, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 44800, (TfLiteIntArray*)&tensor_dimension65, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension66, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension69, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for(size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
